-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of simple_sum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple_sum,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=68}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_37 : BOOLEAN;
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal in_data_last_V_tmp_fu_118_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_1_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_out_data_TREADY : STD_LOGIC;
    signal sum_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_61 : BOOLEAN;
    signal ap_reg_ioackin_out_data_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_data_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and not(((in_data_TVALID = ap_const_logic_0) or (not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY))))))) then 
                    ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and not((in_data_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = out_data_TREADY)))) then 
                    ap_reg_ioackin_out_data_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    sum_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0) and not(((in_data_TVALID = ap_const_logic_0) or (not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY)))))) then 
                sum_reg_103 <= sum_1_fu_122_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                sum_reg_103 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (in_data_TVALID, ap_CS_fsm, in_data_last_V_tmp_fu_118_p1, ap_sig_ioackin_out_data_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and not(((in_data_TVALID = ap_const_logic_0) or (not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0) and not(((in_data_TVALID = ap_const_logic_0) or (not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_37 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    ap_sig_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_61 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_61)
    begin
        if (ap_sig_61) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_37)
    begin
        if (ap_sig_37) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_out_data_TREADY_assign_proc : process(out_data_TREADY, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_data_TREADY)) then 
            ap_sig_ioackin_out_data_TREADY <= out_data_TREADY;
        else 
            ap_sig_ioackin_out_data_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TDATA_blk_n_assign_proc : process(in_data_TVALID, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_data_TDATA_blk_n <= in_data_TVALID;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_data_TREADY_assign_proc : process(in_data_TVALID, ap_sig_cseq_ST_st2_fsm_1, in_data_last_V_tmp_fu_118_p1, ap_sig_ioackin_out_data_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((in_data_TVALID = ap_const_logic_0) or (not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY))))))) then 
            in_data_TREADY <= ap_const_logic_1;
        else 
            in_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    in_data_last_V_tmp_fu_118_p1 <= in_data_TLAST;
    out_data_TDATA <= std_logic_vector(unsigned(in_data_TDATA) + unsigned(sum_reg_103));

    out_data_TDATA_blk_n_assign_proc : process(out_data_TREADY, ap_sig_cseq_ST_st2_fsm_1, in_data_last_V_tmp_fu_118_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)))) then 
            out_data_TDATA_blk_n <= out_data_TREADY;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDEST <= ap_const_lv1_0;
    out_data_TID <= ap_const_lv1_0;
    out_data_TKEEP <= ap_const_lv4_F;
    out_data_TLAST <= ap_const_lv1_1;
    out_data_TSTRB <= ap_const_lv4_F;
    out_data_TUSER <= ap_const_lv1_0;

    out_data_TVALID_assign_proc : process(in_data_TVALID, ap_sig_cseq_ST_st2_fsm_1, in_data_last_V_tmp_fu_118_p1, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((in_data_last_V_tmp_fu_118_p1 = ap_const_lv1_0)) and not((in_data_TVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_out_data_TREADY)))) then 
            out_data_TVALID <= ap_const_logic_1;
        else 
            out_data_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_fu_122_p2 <= std_logic_vector(unsigned(in_data_TDATA) + unsigned(sum_reg_103));
end behav;
