// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "stream_double.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic stream_double::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic stream_double::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> stream_double::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> stream_double::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> stream_double::ap_const_lv1_1 = "1";
const sc_lv<32> stream_double::ap_const_lv32_1 = "1";

stream_double::stream_double(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_36 );

    SC_METHOD(thread_ap_sig_ioackin_out_data_TREADY);
    sensitive << ( out_data_TREADY );
    sensitive << ( ap_reg_ioackin_out_data_TREADY );

    SC_METHOD(thread_in_data_TDATA_blk_n);
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_in_data_TREADY);
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );

    SC_METHOD(thread_out_data_TDATA);
    sensitive << ( in_data_TDATA );
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TDATA_blk_n);
    sensitive << ( out_data_TREADY );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TDEST);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TDEST );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TID);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TID );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TKEEP);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TKEEP );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TLAST);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TLAST );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TSTRB);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TSTRB );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TUSER);
    sensitive << ( in_data_TVALID );
    sensitive << ( in_data_TUSER );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_out_data_TVALID);
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_reg_ioackin_out_data_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_data_TVALID );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_ioackin_out_data_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_reg_ioackin_out_data_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "stream_double_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_data_TDATA, "(port)in_data_TDATA");
    sc_trace(mVcdFile, in_data_TVALID, "(port)in_data_TVALID");
    sc_trace(mVcdFile, in_data_TREADY, "(port)in_data_TREADY");
    sc_trace(mVcdFile, in_data_TKEEP, "(port)in_data_TKEEP");
    sc_trace(mVcdFile, in_data_TSTRB, "(port)in_data_TSTRB");
    sc_trace(mVcdFile, in_data_TUSER, "(port)in_data_TUSER");
    sc_trace(mVcdFile, in_data_TLAST, "(port)in_data_TLAST");
    sc_trace(mVcdFile, in_data_TID, "(port)in_data_TID");
    sc_trace(mVcdFile, in_data_TDEST, "(port)in_data_TDEST");
    sc_trace(mVcdFile, out_data_TDATA, "(port)out_data_TDATA");
    sc_trace(mVcdFile, out_data_TVALID, "(port)out_data_TVALID");
    sc_trace(mVcdFile, out_data_TREADY, "(port)out_data_TREADY");
    sc_trace(mVcdFile, out_data_TKEEP, "(port)out_data_TKEEP");
    sc_trace(mVcdFile, out_data_TSTRB, "(port)out_data_TSTRB");
    sc_trace(mVcdFile, out_data_TUSER, "(port)out_data_TUSER");
    sc_trace(mVcdFile, out_data_TLAST, "(port)out_data_TLAST");
    sc_trace(mVcdFile, out_data_TID, "(port)out_data_TID");
    sc_trace(mVcdFile, out_data_TDEST, "(port)out_data_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_data_TDATA_blk_n, "in_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_36, "ap_sig_36");
    sc_trace(mVcdFile, out_data_TDATA_blk_n, "out_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_ioackin_out_data_TREADY, "ap_sig_ioackin_out_data_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_out_data_TREADY, "ap_reg_ioackin_out_data_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("stream_double.hdltvin.dat");
    mHdltvoutHandle.open("stream_double.hdltvout.dat");
}

stream_double::~stream_double() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void stream_double::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_out_data_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
              !(esl_seteq<1,1,1>(in_data_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read()))))) {
            ap_reg_ioackin_out_data_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                     !esl_seteq<1,1,1>(in_data_TVALID.read(), ap_const_logic_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, out_data_TREADY.read())))) {
            ap_reg_ioackin_out_data_TREADY = ap_const_logic_1;
        }
    }
}

void stream_double::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void stream_double::thread_ap_sig_36() {
    ap_sig_36 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void stream_double::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_36.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void stream_double::thread_ap_sig_ioackin_out_data_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_data_TREADY.read())) {
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY.read();
    } else {
        ap_sig_ioackin_out_data_TREADY = ap_const_logic_1;
    }
}

void stream_double::thread_in_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        in_data_TDATA_blk_n = in_data_TVALID.read();
    } else {
        in_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void stream_double::thread_in_data_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !(esl_seteq<1,1,1>(in_data_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_data_TREADY.read()))))) {
        in_data_TREADY = ap_const_logic_1;
    } else {
        in_data_TREADY = ap_const_logic_0;
    }
}

void stream_double::thread_out_data_TDATA() {
    out_data_TDATA = (!ap_const_lv32_1.is_01())? sc_lv<32>(): in_data_TDATA.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void stream_double::thread_out_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        out_data_TDATA_blk_n = out_data_TREADY.read();
    } else {
        out_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void stream_double::thread_out_data_TDEST() {
    out_data_TDEST = in_data_TDEST.read();
}

void stream_double::thread_out_data_TID() {
    out_data_TID = in_data_TID.read();
}

void stream_double::thread_out_data_TKEEP() {
    out_data_TKEEP = in_data_TKEEP.read();
}

void stream_double::thread_out_data_TLAST() {
    out_data_TLAST = in_data_TLAST.read();
}

void stream_double::thread_out_data_TSTRB() {
    out_data_TSTRB = in_data_TSTRB.read();
}

void stream_double::thread_out_data_TUSER() {
    out_data_TUSER = in_data_TUSER.read();
}

void stream_double::thread_out_data_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(in_data_TVALID.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_data_TREADY.read())))) {
        out_data_TVALID = ap_const_logic_1;
    } else {
        out_data_TVALID = ap_const_logic_0;
    }
}

void stream_double::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void stream_double::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDATA\" :  \"" << in_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TVALID\" :  \"" << in_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_data_TREADY\" :  \"" << in_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TKEEP\" :  \"" << in_data_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TSTRB\" :  \"" << in_data_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TUSER\" :  \"" << in_data_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TLAST\" :  \"" << in_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TID\" :  \"" << in_data_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDEST\" :  \"" << in_data_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDATA\" :  \"" << out_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TVALID\" :  \"" << out_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_data_TREADY\" :  \"" << out_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TKEEP\" :  \"" << out_data_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TSTRB\" :  \"" << out_data_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TUSER\" :  \"" << out_data_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TLAST\" :  \"" << out_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TID\" :  \"" << out_data_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDEST\" :  \"" << out_data_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

