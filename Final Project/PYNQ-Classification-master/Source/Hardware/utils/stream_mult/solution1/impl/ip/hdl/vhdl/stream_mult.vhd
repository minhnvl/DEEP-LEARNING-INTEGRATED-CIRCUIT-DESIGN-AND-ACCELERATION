-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_a_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_a_TVALID : IN STD_LOGIC;
    in_a_TREADY : OUT STD_LOGIC;
    in_a_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_a_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_a_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_a_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_a_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_a_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_b_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_b_TVALID : IN STD_LOGIC;
    in_b_TREADY : OUT STD_LOGIC;
    in_b_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_b_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_b_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_b_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_b_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_b_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of stream_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream_mult,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=8,HLS_SYN_LUT=7}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_a_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_50 : BOOLEAN;
    signal in_b_TDATA_blk_n : STD_LOGIC;
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_59 : BOOLEAN;
    signal ap_sig_66 : BOOLEAN;
    signal r_V_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_171 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_out_data_TREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_out_data_TREADY : STD_LOGIC;
    signal grp_fu_148_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component stream_mult_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    stream_mult_mul_32s_32s_32_6_U0 : component stream_mult_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_b_TDATA,
        din1 => in_a_TDATA,
        ce => grp_fu_148_ce,
        dout => grp_fu_148_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_data_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY))))) then 
                    ap_reg_ioackin_out_data_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_logic_1 = out_data_TREADY)))) then 
                    ap_reg_ioackin_out_data_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_66))) then
                r_V_reg_171 <= r_V_fu_155_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_66, ap_sig_ioackin_out_data_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_66)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_50 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_59 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_66_assign_proc : process(in_a_TVALID, in_b_TVALID)
    begin
                ap_sig_66 <= ((in_a_TVALID = ap_const_logic_0) or (in_b_TVALID = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_50)
    begin
        if (ap_sig_50) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_59)
    begin
        if (ap_sig_59) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_out_data_TREADY_assign_proc : process(out_data_TREADY, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_data_TREADY)) then 
            ap_sig_ioackin_out_data_TREADY <= out_data_TREADY;
        else 
            ap_sig_ioackin_out_data_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_148_ce_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_66, ap_sig_ioackin_out_data_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and ap_sig_66) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_logic_0 = ap_sig_ioackin_out_data_TREADY)))) then 
            grp_fu_148_ce <= ap_const_logic_0;
        else 
            grp_fu_148_ce <= ap_const_logic_1;
        end if; 
    end process;


    in_a_TDATA_blk_n_assign_proc : process(in_a_TVALID, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            in_a_TDATA_blk_n <= in_a_TVALID;
        else 
            in_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_a_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_66)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_66)))) then 
            in_a_TREADY <= ap_const_logic_1;
        else 
            in_a_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_b_TDATA_blk_n_assign_proc : process(in_b_TVALID, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            in_b_TDATA_blk_n <= in_b_TVALID;
        else 
            in_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_b_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_66)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_66)))) then 
            in_b_TREADY <= ap_const_logic_1;
        else 
            in_b_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    out_data_TDATA <= grp_fu_148_p2;

    out_data_TDATA_blk_n_assign_proc : process(out_data_TREADY, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            out_data_TDATA_blk_n <= out_data_TREADY;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDEST <= ap_const_lv1_0;
    out_data_TID <= ap_const_lv1_0;
    out_data_TKEEP <= ap_const_lv4_F;
    out_data_TLAST <= r_V_reg_171;
    out_data_TSTRB <= ap_const_lv4_F;
    out_data_TUSER <= ap_const_lv1_0;

    out_data_TVALID_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_reg_ioackin_out_data_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_logic_0 = ap_reg_ioackin_out_data_TREADY)))) then 
            out_data_TVALID <= ap_const_logic_1;
        else 
            out_data_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_155_p2 <= (in_a_TLAST or in_b_TLAST);
end behav;
