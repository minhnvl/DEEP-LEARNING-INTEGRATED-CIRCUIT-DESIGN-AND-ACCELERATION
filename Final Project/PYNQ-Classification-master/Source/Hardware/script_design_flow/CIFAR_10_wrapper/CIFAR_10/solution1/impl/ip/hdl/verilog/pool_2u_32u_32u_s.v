// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_2u_32u_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 68'd1;
parameter    ap_ST_fsm_state2 = 68'd2;
parameter    ap_ST_fsm_state3 = 68'd4;
parameter    ap_ST_fsm_state4 = 68'd8;
parameter    ap_ST_fsm_state5 = 68'd16;
parameter    ap_ST_fsm_state6 = 68'd32;
parameter    ap_ST_fsm_state7 = 68'd64;
parameter    ap_ST_fsm_state8 = 68'd128;
parameter    ap_ST_fsm_state9 = 68'd256;
parameter    ap_ST_fsm_state10 = 68'd512;
parameter    ap_ST_fsm_state11 = 68'd1024;
parameter    ap_ST_fsm_state12 = 68'd2048;
parameter    ap_ST_fsm_state13 = 68'd4096;
parameter    ap_ST_fsm_state14 = 68'd8192;
parameter    ap_ST_fsm_state15 = 68'd16384;
parameter    ap_ST_fsm_state16 = 68'd32768;
parameter    ap_ST_fsm_state17 = 68'd65536;
parameter    ap_ST_fsm_state18 = 68'd131072;
parameter    ap_ST_fsm_state19 = 68'd262144;
parameter    ap_ST_fsm_state20 = 68'd524288;
parameter    ap_ST_fsm_state21 = 68'd1048576;
parameter    ap_ST_fsm_state22 = 68'd2097152;
parameter    ap_ST_fsm_state23 = 68'd4194304;
parameter    ap_ST_fsm_state24 = 68'd8388608;
parameter    ap_ST_fsm_state25 = 68'd16777216;
parameter    ap_ST_fsm_state26 = 68'd33554432;
parameter    ap_ST_fsm_state27 = 68'd67108864;
parameter    ap_ST_fsm_state28 = 68'd134217728;
parameter    ap_ST_fsm_state29 = 68'd268435456;
parameter    ap_ST_fsm_state30 = 68'd536870912;
parameter    ap_ST_fsm_state31 = 68'd1073741824;
parameter    ap_ST_fsm_state32 = 68'd2147483648;
parameter    ap_ST_fsm_state33 = 68'd4294967296;
parameter    ap_ST_fsm_state34 = 68'd8589934592;
parameter    ap_ST_fsm_state35 = 68'd17179869184;
parameter    ap_ST_fsm_state36 = 68'd34359738368;
parameter    ap_ST_fsm_state37 = 68'd68719476736;
parameter    ap_ST_fsm_state38 = 68'd137438953472;
parameter    ap_ST_fsm_state39 = 68'd274877906944;
parameter    ap_ST_fsm_state40 = 68'd549755813888;
parameter    ap_ST_fsm_state41 = 68'd1099511627776;
parameter    ap_ST_fsm_state42 = 68'd2199023255552;
parameter    ap_ST_fsm_state43 = 68'd4398046511104;
parameter    ap_ST_fsm_state44 = 68'd8796093022208;
parameter    ap_ST_fsm_state45 = 68'd17592186044416;
parameter    ap_ST_fsm_state46 = 68'd35184372088832;
parameter    ap_ST_fsm_state47 = 68'd70368744177664;
parameter    ap_ST_fsm_state48 = 68'd140737488355328;
parameter    ap_ST_fsm_state49 = 68'd281474976710656;
parameter    ap_ST_fsm_state50 = 68'd562949953421312;
parameter    ap_ST_fsm_state51 = 68'd1125899906842624;
parameter    ap_ST_fsm_state52 = 68'd2251799813685248;
parameter    ap_ST_fsm_state53 = 68'd4503599627370496;
parameter    ap_ST_fsm_state54 = 68'd9007199254740992;
parameter    ap_ST_fsm_state55 = 68'd18014398509481984;
parameter    ap_ST_fsm_state56 = 68'd36028797018963968;
parameter    ap_ST_fsm_state57 = 68'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage0 = 68'd144115188075855872;
parameter    ap_ST_fsm_state60 = 68'd288230376151711744;
parameter    ap_ST_fsm_state61 = 68'd576460752303423488;
parameter    ap_ST_fsm_state62 = 68'd1152921504606846976;
parameter    ap_ST_fsm_pp1_stage0 = 68'd2305843009213693952;
parameter    ap_ST_fsm_pp1_stage1 = 68'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 68'd9223372036854775808;
parameter    ap_ST_fsm_pp2_stage0 = 68'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 68'd36893488147419103232;
parameter    ap_ST_fsm_pp3_stage0 = 68'd73786976294838206464;
parameter    ap_ST_fsm_state73 = 68'd147573952589676412928;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg[31:0] out_V_V_din;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [67:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] IFMCH_curr_1;
reg   [31:0] IFMDim_curr_1;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_flatten_reg_1511;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_1479;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten4_reg_1568;
reg   [0:0] exitcond_flatten4_reg_1568_pp3_iter1_reg;
reg   [31:0] i3_reg_680;
reg   [32:0] indvar_flatten_reg_724;
reg   [31:0] ch_reg_735;
reg   [5:0] ch2_reg_746;
reg   [62:0] indvar_flatten4_reg_757;
reg   [30:0] outpix_reg_768;
reg   [31:0] outch_reg_779;
reg   [31:0] reg_790;
reg    ap_block_state1;
reg    ap_block_state64_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [31:0] tmp_V_20_reg_1377;
reg    ap_block_state2;
reg  signed [31:0] tmp_V_22_reg_1382;
reg    ap_block_state3;
reg  signed [31:0] tmp_V_24_reg_1388;
reg    ap_block_state4;
reg  signed [31:0] tmp_V_28_reg_1393;
reg    ap_block_state6;
reg   [31:0] tmp_V_30_reg_1400;
reg    ap_block_state7;
wire   [5:0] j_2_fu_821_p2;
reg   [5:0] j_2_reg_1411;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_32_fu_827_p3;
reg   [9:0] tmp_32_reg_1416;
wire   [0:0] tmp_17_fu_815_p2;
wire   [0:0] tmp_18_fu_840_p2;
reg   [0:0] tmp_18_reg_1435;
wire  signed [31:0] KER_size_0_fu_1056_p2;
reg  signed [31:0] KER_size_0_reg_1439;
wire    ap_CS_fsm_state55;
wire   [30:0] tmp_9_fu_1064_p4;
reg   [30:0] tmp_9_reg_1444;
wire   [32:0] tmp_64_fu_1074_p3;
reg   [32:0] tmp_64_reg_1449;
wire   [31:0] tmp_65_fu_1082_p3;
reg   [31:0] tmp_65_reg_1454;
wire   [62:0] bound3_fu_1098_p2;
reg   [62:0] bound3_reg_1459;
wire   [62:0] bound5_fu_1107_p2;
reg   [62:0] bound5_reg_1464;
wire  signed [31:0] KER_size_1_fu_1113_p2;
reg  signed [31:0] KER_size_1_reg_1469;
wire    ap_CS_fsm_state56;
wire   [31:0] KER_bound_fu_1117_p2;
reg   [31:0] KER_bound_reg_1474;
wire    ap_CS_fsm_state57;
wire   [0:0] exitcond1_fu_1121_p2;
wire    ap_block_state58_pp0_stage0_iter0;
reg    ap_block_state59_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_1126_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [62:0] indvar_flatten_next3_fu_1137_p2;
reg   [62:0] indvar_flatten_next3_reg_1491;
wire    ap_CS_fsm_state61;
wire   [0:0] exitcond_flatten8_fu_1143_p2;
wire    ap_CS_fsm_state62;
wire   [31:0] indvar_flatten_next7_fu_1148_p2;
reg   [31:0] indvar_flatten_next7_reg_1500;
wire   [30:0] xp_mid2_fu_1159_p3;
reg   [30:0] xp_mid2_reg_1505;
wire   [0:0] exitcond_flatten_fu_1167_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state63_pp1_stage0_iter0;
wire    ap_block_state65_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [32:0] indvar_flatten_next_fu_1172_p2;
reg   [32:0] indvar_flatten_next_reg_1515;
wire   [31:0] ch_mid2_fu_1184_p3;
reg   [31:0] ch_mid2_reg_1520;
reg   [4:0] acc_addr_8_reg_1526;
wire   [31:0] ch_3_fu_1196_p2;
reg   [31:0] ch_3_reg_1532;
wire   [10:0] tmp_70_fu_1216_p1;
reg   [10:0] tmp_70_reg_1537;
wire    ap_CS_fsm_state66;
wire   [0:0] tmp_26_fu_1219_p2;
reg   [0:0] tmp_26_reg_1542;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state67_pp2_stage0_iter0;
wire    ap_block_state68_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [5:0] ch_4_fu_1225_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [8:0] buf_addr_6_reg_1551;
reg   [4:0] acc_addr_7_reg_1557;
wire   [30:0] xp_2_fu_1273_p2;
wire    ap_CS_fsm_state69;
wire   [0:0] exitcond_flatten4_fu_1278_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state70_pp3_stage0_iter0;
wire    ap_block_state71_pp3_stage0_iter1;
reg    ap_block_state72_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [62:0] indvar_flatten_next4_fu_1283_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [30:0] tmp_22_mid2_v_fu_1309_p3;
reg   [30:0] tmp_22_mid2_v_reg_1577;
reg   [8:0] buf_addr_5_reg_1582;
wire   [31:0] outch_2_fu_1349_p2;
wire   [30:0] tmp_V_35_fu_1365_p3;
reg   [30:0] tmp_V_35_reg_1593;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state58;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state63;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state67;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state70;
reg    ap_enable_reg_pp3_iter1;
reg   [8:0] buf_address0;
reg    buf_ce0;
wire   [31:0] buf_q0;
reg   [8:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [31:0] buf_d1;
reg   [4:0] acc_address0;
reg    acc_ce0;
wire   [31:0] acc_q0;
reg   [4:0] acc_address1;
reg    acc_ce1;
reg    acc_we1;
reg   [31:0] acc_d1;
reg   [31:0] IFMCH_curr_3_loc_reg_659;
reg    ap_block_state8;
wire   [0:0] tmp_s_fu_794_p2;
reg   [5:0] j_reg_669;
wire    ap_CS_fsm_state24;
reg   [62:0] indvar_flatten3_reg_691;
wire    ap_CS_fsm_state73;
reg   [31:0] indvar_flatten6_reg_702;
wire   [0:0] exitcond_flatten3_fu_1132_p2;
reg   [30:0] xp_reg_713;
reg   [32:0] ap_phi_mux_indvar_flatten_phi_fu_728_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] ap_phi_mux_ch_phi_fu_739_p4;
reg   [30:0] ap_phi_mux_outpix_phi_fu_772_p4;
wire   [63:0] tmp_33_fu_835_p1;
wire   [63:0] tmp_35_fu_851_p3;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_37_fu_865_p3;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_39_fu_879_p3;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_41_fu_893_p3;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_43_fu_907_p3;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_45_fu_921_p3;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_47_fu_935_p3;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_49_fu_949_p3;
wire    ap_CS_fsm_state17;
wire   [63:0] tmp_51_fu_963_p3;
wire    ap_CS_fsm_state18;
wire   [63:0] tmp_53_fu_977_p3;
wire    ap_CS_fsm_state19;
wire   [63:0] tmp_55_fu_991_p3;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_57_fu_1005_p3;
wire    ap_CS_fsm_state21;
wire   [63:0] tmp_59_fu_1019_p3;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_61_fu_1033_p3;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_63_fu_1047_p3;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire   [63:0] tmp_25_fu_1192_p1;
wire   [63:0] tmp_74_cast_fu_1253_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] tmp_28_fu_1231_p1;
wire   [63:0] tmp_71_cast_fu_1344_p1;
wire   [63:0] tmp_21_fu_1321_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_V_1_fu_1373_p1;
reg    ap_block_pp3_stage0_01001;
wire   [31:0] tmp_30_fu_1264_p3;
wire   [31:0] acc_load_2_valIn_V_fu_1207_p3;
wire   [9:0] tmp_34_fu_846_p2;
wire   [9:0] tmp_36_fu_860_p2;
wire   [9:0] tmp_38_fu_874_p2;
wire   [9:0] tmp_40_fu_888_p2;
wire   [9:0] tmp_42_fu_902_p2;
wire   [9:0] tmp_44_fu_916_p2;
wire   [9:0] tmp_46_fu_930_p2;
wire   [9:0] tmp_48_fu_944_p2;
wire   [9:0] tmp_50_fu_958_p2;
wire   [9:0] tmp_52_fu_972_p2;
wire   [9:0] tmp_54_fu_986_p2;
wire   [9:0] tmp_56_fu_1000_p2;
wire   [9:0] tmp_58_fu_1014_p2;
wire   [9:0] tmp_60_fu_1028_p2;
wire   [9:0] tmp_62_fu_1042_p2;
wire   [30:0] bound3_fu_1098_p0;
wire   [62:0] cast9_fu_1090_p1;
wire   [31:0] bound3_fu_1098_p1;
wire   [31:0] bound5_fu_1107_p0;
wire   [30:0] bound5_fu_1107_p1;
wire   [0:0] exitcond_fu_1154_p2;
wire   [0:0] exitcond4_fu_1178_p2;
wire   [0:0] tmp_31_fu_1201_p2;
wire   [9:0] tmp_71_fu_1236_p3;
wire   [10:0] tmp_73_cast_fu_1244_p1;
wire   [10:0] tmp_72_fu_1248_p2;
wire   [0:0] tmp_29_fu_1258_p2;
wire   [0:0] exitcond3_fu_1295_p2;
wire   [30:0] outpix_2_fu_1289_p2;
wire   [31:0] outch_mid2_fu_1301_p3;
wire   [6:0] tmp_67_fu_1326_p1;
wire   [10:0] tmp_70_cast_fu_1330_p3;
wire   [10:0] tmp_66_fu_1317_p1;
wire   [10:0] tmp_68_fu_1338_p2;
wire   [0:0] tmp_22_fu_1359_p2;
wire   [30:0] tmp_69_fu_1355_p1;
wire    ap_CS_fsm_state60;
reg   [67:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [62:0] bound3_fu_1098_p10;
wire   [62:0] bound5_fu_1107_p00;
reg    ap_condition_521;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 68'd1;
#0 IFMCH_curr_1 = 32'd0;
#0 IFMDim_curr_1 = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

pool_2u_32u_32u_s4jc #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1)
);

pool_2u_32u_32u_s5jm #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .q0(acc_q0),
    .address1(acc_address1),
    .ce1(acc_ce1),
    .we1(acc_we1),
    .d1(acc_d1)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U56(
    .din0(tmp_V_28_reg_1393),
    .din1(tmp_V_22_reg_1382),
    .dout(KER_size_0_fu_1056_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U57(
    .din0(tmp_V_22_reg_1382),
    .din1(KER_size_0_reg_1439),
    .dout(KER_size_1_fu_1113_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U58(
    .din0(tmp_V_24_reg_1388),
    .din1(KER_size_1_reg_1469),
    .dout(KER_bound_fu_1117_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state60)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state58))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state58);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state63) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state62) & (exitcond_flatten8_fu_1143_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state62) & (exitcond_flatten8_fu_1143_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state67) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state66)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state67))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state67);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state66)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state70) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state70)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state70);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_521)) begin
        if ((tmp_s_fu_794_p2 == 1'd0)) begin
            IFMCH_curr_3_loc_reg_659 <= IFMCH_curr_1;
        end else if ((tmp_s_fu_794_p2 == 1'd1)) begin
            IFMCH_curr_3_loc_reg_659 <= tmp_V_28_reg_1393;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        ch2_reg_746 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_26_fu_1219_p2 == 1'd0))) begin
        ch2_reg_746 <= ch_4_fu_1225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        ch_reg_735 <= ch_3_reg_1532;
    end else if (((1'b1 == ap_CS_fsm_state62) & (exitcond_flatten8_fu_1143_p2 == 1'd0))) begin
        ch_reg_735 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_fu_1121_p2 == 1'd0))) begin
        i3_reg_680 <= i_fu_1126_p2;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        i3_reg_680 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        indvar_flatten3_reg_691 <= indvar_flatten_next3_reg_1491;
    end else if (((tmp_18_reg_1435 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        indvar_flatten3_reg_691 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        indvar_flatten4_reg_757 <= 63'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1278_p2 == 1'd0))) begin
        indvar_flatten4_reg_757 <= indvar_flatten_next4_fu_1283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_fu_1132_p2 == 1'd0))) begin
        indvar_flatten6_reg_702 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        indvar_flatten6_reg_702 <= indvar_flatten_next7_reg_1500;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        indvar_flatten_reg_724 <= indvar_flatten_next_reg_1515;
    end else if (((1'b1 == ap_CS_fsm_state62) & (exitcond_flatten8_fu_1143_p2 == 1'd0))) begin
        indvar_flatten_reg_724 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_reg_669 <= j_2_reg_1411;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        j_reg_669 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        outch_reg_779 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1278_p2 == 1'd0))) begin
        outch_reg_779 <= outch_2_fu_1349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        outpix_reg_768 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_reg_1568 == 1'd0))) begin
        outpix_reg_768 <= tmp_22_mid2_v_reg_1577;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_fu_1132_p2 == 1'd0))) begin
        xp_reg_713 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        xp_reg_713 <= xp_2_fu_1273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (tmp_s_fu_794_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        IFMCH_curr_1 <= tmp_V_28_reg_1393;
        IFMDim_curr_1 <= tmp_V_30_reg_1400;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        KER_bound_reg_1474 <= KER_bound_fu_1117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (tmp_18_reg_1435 == 1'd0))) begin
        KER_size_0_reg_1439 <= KER_size_0_fu_1056_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        KER_size_1_reg_1469 <= KER_size_1_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_26_fu_1219_p2 == 1'd0))) begin
        acc_addr_7_reg_1557 <= tmp_28_fu_1231_p1;
        buf_addr_6_reg_1551 <= tmp_74_cast_fu_1253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        acc_addr_8_reg_1526 <= tmp_25_fu_1192_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_1435 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        bound3_reg_1459 <= bound3_fu_1098_p2;
        bound5_reg_1464 <= bound5_fu_1107_p2;
        tmp_64_reg_1449[32 : 1] <= tmp_64_fu_1074_p3[32 : 1];
        tmp_65_reg_1454[31 : 1] <= tmp_65_fu_1082_p3[31 : 1];
        tmp_9_reg_1444 <= {{IFMDim_curr_1[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1278_p2 == 1'd0))) begin
        buf_addr_5_reg_1582 <= tmp_71_cast_fu_1344_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        ch_3_reg_1532 <= ch_3_fu_1196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_1167_p2 == 1'd0))) begin
        ch_mid2_reg_1520 <= ch_mid2_fu_1184_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_1479 <= exitcond1_fu_1121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_flatten4_reg_1568 <= exitcond_flatten4_fu_1278_p2;
        exitcond_flatten4_reg_1568_pp3_iter1_reg <= exitcond_flatten4_reg_1568;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1511 <= exitcond_flatten_fu_1167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        indvar_flatten_next3_reg_1491 <= indvar_flatten_next3_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        indvar_flatten_next7_reg_1500 <= indvar_flatten_next7_fu_1148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_1515 <= indvar_flatten_next_fu_1172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_1411 <= j_2_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1511 == 1'd0)))) begin
        reg_790 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_815_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_18_reg_1435 <= tmp_18_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1278_p2 == 1'd0))) begin
        tmp_22_mid2_v_reg_1577 <= tmp_22_mid2_v_fu_1309_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_26_reg_1542 <= tmp_26_fu_1219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_815_p2 == 1'd0))) begin
        tmp_32_reg_1416[9 : 4] <= tmp_32_fu_827_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        tmp_70_reg_1537 <= tmp_70_fu_1216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_20_reg_1377 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_22_reg_1382 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_24_reg_1388 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_28_reg_1393 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_30_reg_1400 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_reg_1568 == 1'd0))) begin
        tmp_V_35_reg_1593 <= tmp_V_35_fu_1365_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) & (exitcond_flatten8_fu_1143_p2 == 1'd0))) begin
        xp_mid2_reg_1505 <= xp_mid2_fu_1159_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address0 = tmp_28_fu_1231_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        acc_address0 = tmp_25_fu_1192_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        acc_address1 = tmp_21_fu_1321_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address1 = acc_addr_7_reg_1557;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_address1 = acc_addr_8_reg_1526;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        acc_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        acc_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        acc_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        acc_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        acc_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        acc_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        acc_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        acc_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        acc_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        acc_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        acc_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        acc_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        acc_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        acc_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        acc_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        acc_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        acc_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        acc_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        acc_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        acc_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        acc_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        acc_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        acc_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        acc_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        acc_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_address1 = 64'd0;
    end else begin
        acc_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_d1 = acc_load_2_valIn_V_fu_1207_p3;
    end else if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        acc_d1 = 32'd4293967297;
    end else begin
        acc_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state55) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1278_p2 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_26_reg_1542 == 1'd0)) | ((tmp_17_fu_815_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1511 == 1'd0)))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_1121_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1167_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state63 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state63 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_26_fu_1219_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state67 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state67 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_1278_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state70 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state70 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        ap_phi_mux_ch_phi_fu_739_p4 = ch_3_reg_1532;
    end else begin
        ap_phi_mux_ch_phi_fu_739_p4 = ch_reg_735;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1511 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_728_p4 = indvar_flatten_next_reg_1515;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_728_p4 = indvar_flatten_reg_724;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten4_reg_1568 == 1'd0))) begin
        ap_phi_mux_outpix_phi_fu_772_p4 = tmp_22_mid2_v_reg_1577;
    end else begin
        ap_phi_mux_outpix_phi_fu_772_p4 = outpix_reg_768;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address0 = tmp_71_cast_fu_1344_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address0 = tmp_74_cast_fu_1253_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address1 = buf_addr_5_reg_1582;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address1 = buf_addr_6_reg_1551;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_address1 = tmp_63_fu_1047_p3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_address1 = tmp_61_fu_1033_p3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_address1 = tmp_59_fu_1019_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_address1 = tmp_57_fu_1005_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_address1 = tmp_55_fu_991_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf_address1 = tmp_53_fu_977_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buf_address1 = tmp_51_fu_963_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_address1 = tmp_49_fu_949_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_address1 = tmp_47_fu_935_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_address1 = tmp_45_fu_921_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_address1 = tmp_43_fu_907_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buf_address1 = tmp_41_fu_893_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_address1 = tmp_39_fu_879_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_address1 = tmp_37_fu_865_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address1 = tmp_35_fu_851_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_address1 = tmp_33_fu_835_p1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        buf_ce1 = 1'b1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_d1 = tmp_30_fu_1264_p3;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        buf_d1 = 32'd4293967297;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state24) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_reg_1568 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_26_reg_1542 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_815_p2 == 1'd0)))) begin
        buf_we1 = 1'b1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_1479 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1511 == 1'd0) & (1'b0 == ap_block_pp1_stage1)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1479 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1511 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_1479 == 1'd0)))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0))) begin
        out_V_V_din = tmp_V_1_fu_1373_p1;
    end else if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1479 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_din = in_V_V_dout;
    end else begin
        out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1479 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_17_fu_815_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((tmp_18_reg_1435 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_1121_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_1121_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state61 : begin
            if (((exitcond_flatten3_fu_1132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((exitcond_flatten8_fu_1143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_1167_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_1167_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_26_fu_1219_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_26_fu_1219_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten4_fu_1278_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten4_fu_1278_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_load_2_valIn_V_fu_1207_p3 = ((tmp_31_fu_1201_p2[0:0] === 1'b1) ? acc_q0 : reg_790);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1479 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1479 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1479 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1479 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1479 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1479 == 1'd0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1511 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1511 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state58_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_pp0_stage0_iter1 = (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1479 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1479 == 1'd0)));
end

always @ (*) begin
    ap_block_state6 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state63_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state64_pp1_stage1_iter0 = ((in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1511 == 1'd0));
end

assign ap_block_state65_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state70_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp3_stage0_iter2 = ((out_V_V_full_n == 1'b0) & (exitcond_flatten4_reg_1568_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state8 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_521 = (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound3_fu_1098_p0 = cast9_fu_1090_p1;

assign bound3_fu_1098_p1 = bound3_fu_1098_p10;

assign bound3_fu_1098_p10 = IFMCH_curr_3_loc_reg_659;

assign bound3_fu_1098_p2 = (bound3_fu_1098_p0 * bound3_fu_1098_p1);

assign bound5_fu_1107_p0 = bound5_fu_1107_p00;

assign bound5_fu_1107_p00 = tmp_V_20_reg_1377;

assign bound5_fu_1107_p1 = cast9_fu_1090_p1;

assign bound5_fu_1107_p2 = (bound5_fu_1107_p0 * bound5_fu_1107_p1);

assign cast9_fu_1090_p1 = tmp_9_fu_1064_p4;

assign ch_3_fu_1196_p2 = (ch_mid2_reg_1520 + 32'd1);

assign ch_4_fu_1225_p2 = (ch2_reg_746 + 6'd1);

assign ch_mid2_fu_1184_p3 = ((exitcond4_fu_1178_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_ch_phi_fu_739_p4);

assign exitcond1_fu_1121_p2 = ((i3_reg_680 == KER_bound_reg_1474) ? 1'b1 : 1'b0);

assign exitcond3_fu_1295_p2 = ((outch_reg_779 == IFMCH_curr_3_loc_reg_659) ? 1'b1 : 1'b0);

assign exitcond4_fu_1178_p2 = ((ap_phi_mux_ch_phi_fu_739_p4 == IFMCH_curr_3_loc_reg_659) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_1132_p2 = ((indvar_flatten3_reg_691 == bound5_reg_1464) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_1278_p2 = ((indvar_flatten4_reg_757 == bound3_reg_1459) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_1143_p2 = ((indvar_flatten6_reg_702 == tmp_65_reg_1454) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1167_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_728_p4 == tmp_64_reg_1449) ? 1'b1 : 1'b0);

assign exitcond_fu_1154_p2 = ((xp_reg_713 == tmp_9_reg_1444) ? 1'b1 : 1'b0);

assign i_fu_1126_p2 = (i3_reg_680 + 32'd1);

assign indvar_flatten_next3_fu_1137_p2 = (indvar_flatten3_reg_691 + 63'd1);

assign indvar_flatten_next4_fu_1283_p2 = (indvar_flatten4_reg_757 + 63'd1);

assign indvar_flatten_next7_fu_1148_p2 = (indvar_flatten6_reg_702 + 32'd1);

assign indvar_flatten_next_fu_1172_p2 = (ap_phi_mux_indvar_flatten_phi_fu_728_p4 + 33'd1);

assign j_2_fu_821_p2 = (j_reg_669 + 6'd1);

assign outch_2_fu_1349_p2 = (32'd1 + outch_mid2_fu_1301_p3);

assign outch_mid2_fu_1301_p3 = ((exitcond3_fu_1295_p2[0:0] === 1'b1) ? 32'd0 : outch_reg_779);

assign outpix_2_fu_1289_p2 = (31'd1 + ap_phi_mux_outpix_phi_fu_772_p4);

assign start_out = real_start;

assign tmp_17_fu_815_p2 = ((j_reg_669 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_18_fu_840_p2 = ((reg_790 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_21_fu_1321_p1 = outch_mid2_fu_1301_p3;

assign tmp_22_fu_1359_p2 = (($signed(buf_q0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_22_mid2_v_fu_1309_p3 = ((exitcond3_fu_1295_p2[0:0] === 1'b1) ? outpix_2_fu_1289_p2 : ap_phi_mux_outpix_phi_fu_772_p4);

assign tmp_25_fu_1192_p1 = ch_mid2_reg_1520;

assign tmp_26_fu_1219_p2 = ((ch2_reg_746 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_28_fu_1231_p1 = ch2_reg_746;

assign tmp_29_fu_1258_p2 = (($signed(buf_q0) > $signed(acc_q0)) ? 1'b1 : 1'b0);

assign tmp_30_fu_1264_p3 = ((tmp_29_fu_1258_p2[0:0] === 1'b1) ? buf_q0 : acc_q0);

assign tmp_31_fu_1201_p2 = (($signed(acc_q0) > $signed(reg_790)) ? 1'b1 : 1'b0);

assign tmp_32_fu_827_p3 = {{j_reg_669}, {4'd0}};

assign tmp_33_fu_835_p1 = tmp_32_fu_827_p3;

assign tmp_34_fu_846_p2 = (tmp_32_reg_1416 | 10'd1);

assign tmp_35_fu_851_p3 = {{54'd0}, {tmp_34_fu_846_p2}};

assign tmp_36_fu_860_p2 = (tmp_32_reg_1416 | 10'd2);

assign tmp_37_fu_865_p3 = {{54'd0}, {tmp_36_fu_860_p2}};

assign tmp_38_fu_874_p2 = (tmp_32_reg_1416 | 10'd3);

assign tmp_39_fu_879_p3 = {{54'd0}, {tmp_38_fu_874_p2}};

assign tmp_40_fu_888_p2 = (tmp_32_reg_1416 | 10'd4);

assign tmp_41_fu_893_p3 = {{54'd0}, {tmp_40_fu_888_p2}};

assign tmp_42_fu_902_p2 = (tmp_32_reg_1416 | 10'd5);

assign tmp_43_fu_907_p3 = {{54'd0}, {tmp_42_fu_902_p2}};

assign tmp_44_fu_916_p2 = (tmp_32_reg_1416 | 10'd6);

assign tmp_45_fu_921_p3 = {{54'd0}, {tmp_44_fu_916_p2}};

assign tmp_46_fu_930_p2 = (tmp_32_reg_1416 | 10'd7);

assign tmp_47_fu_935_p3 = {{54'd0}, {tmp_46_fu_930_p2}};

assign tmp_48_fu_944_p2 = (tmp_32_reg_1416 | 10'd8);

assign tmp_49_fu_949_p3 = {{54'd0}, {tmp_48_fu_944_p2}};

assign tmp_50_fu_958_p2 = (tmp_32_reg_1416 | 10'd9);

assign tmp_51_fu_963_p3 = {{54'd0}, {tmp_50_fu_958_p2}};

assign tmp_52_fu_972_p2 = (tmp_32_reg_1416 | 10'd10);

assign tmp_53_fu_977_p3 = {{54'd0}, {tmp_52_fu_972_p2}};

assign tmp_54_fu_986_p2 = (tmp_32_reg_1416 | 10'd11);

assign tmp_55_fu_991_p3 = {{54'd0}, {tmp_54_fu_986_p2}};

assign tmp_56_fu_1000_p2 = (tmp_32_reg_1416 | 10'd12);

assign tmp_57_fu_1005_p3 = {{54'd0}, {tmp_56_fu_1000_p2}};

assign tmp_58_fu_1014_p2 = (tmp_32_reg_1416 | 10'd13);

assign tmp_59_fu_1019_p3 = {{54'd0}, {tmp_58_fu_1014_p2}};

assign tmp_60_fu_1028_p2 = (tmp_32_reg_1416 | 10'd14);

assign tmp_61_fu_1033_p3 = {{54'd0}, {tmp_60_fu_1028_p2}};

assign tmp_62_fu_1042_p2 = (tmp_32_reg_1416 | 10'd15);

assign tmp_63_fu_1047_p3 = {{54'd0}, {tmp_62_fu_1042_p2}};

assign tmp_64_fu_1074_p3 = {{IFMCH_curr_3_loc_reg_659}, {1'd0}};

assign tmp_65_fu_1082_p3 = {{tmp_9_fu_1064_p4}, {1'd0}};

assign tmp_66_fu_1317_p1 = tmp_22_mid2_v_fu_1309_p3[10:0];

assign tmp_67_fu_1326_p1 = outch_mid2_fu_1301_p3[6:0];

assign tmp_68_fu_1338_p2 = (tmp_70_cast_fu_1330_p3 + tmp_66_fu_1317_p1);

assign tmp_69_fu_1355_p1 = buf_q0[30:0];

assign tmp_70_cast_fu_1330_p3 = {{tmp_67_fu_1326_p1}, {4'd0}};

assign tmp_70_fu_1216_p1 = xp_mid2_reg_1505[10:0];

assign tmp_71_cast_fu_1344_p1 = tmp_68_fu_1338_p2;

assign tmp_71_fu_1236_p3 = {{ch2_reg_746}, {4'd0}};

assign tmp_72_fu_1248_p2 = (tmp_70_reg_1537 + tmp_73_cast_fu_1244_p1);

assign tmp_73_cast_fu_1244_p1 = tmp_71_fu_1236_p3;

assign tmp_74_cast_fu_1253_p1 = tmp_72_fu_1248_p2;

assign tmp_9_fu_1064_p4 = {{IFMDim_curr_1[31:1]}};

assign tmp_V_1_fu_1373_p1 = tmp_V_35_reg_1593;

assign tmp_V_35_fu_1365_p3 = ((tmp_22_fu_1359_p2[0:0] === 1'b1) ? tmp_69_fu_1355_p1 : 31'd0);

assign tmp_s_fu_794_p2 = ((reg_790 == 32'd1) ? 1'b1 : 1'b0);

assign xp_2_fu_1273_p2 = (xp_mid2_reg_1505 + 31'd1);

assign xp_mid2_fu_1159_p3 = ((exitcond_fu_1154_p2[0:0] === 1'b1) ? 31'd0 : xp_reg_713);

always @ (posedge ap_clk) begin
    tmp_32_reg_1416[3:0] <= 4'b0000;
    tmp_64_reg_1449[0] <= 1'b0;
    tmp_65_reg_1454[0] <= 1'b0;
end

endmodule //pool_2u_32u_32u_s
