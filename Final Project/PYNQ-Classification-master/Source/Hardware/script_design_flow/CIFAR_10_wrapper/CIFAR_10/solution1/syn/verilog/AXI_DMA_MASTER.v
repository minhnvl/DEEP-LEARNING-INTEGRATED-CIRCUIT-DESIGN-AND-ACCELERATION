// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXI_DMA_MASTER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_V_dout,
        in_stream_V_V_empty_n,
        in_stream_V_V_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 18'd4096;
parameter    ap_ST_fsm_state16 = 18'd8192;
parameter    ap_ST_fsm_state17 = 18'd16384;
parameter    ap_ST_fsm_state18 = 18'd32768;
parameter    ap_ST_fsm_state19 = 18'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_V_dout;
input   in_stream_V_V_empty_n;
output   in_stream_V_V_read;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output   out_stream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_stream_V_data_V_1_data_out;
reg    out_stream_V_data_V_1_vld_in;
wire    out_stream_V_data_V_1_vld_out;
wire    out_stream_V_data_V_1_ack_in;
wire    out_stream_V_data_V_1_ack_out;
reg   [31:0] out_stream_V_data_V_1_payload_A;
reg   [31:0] out_stream_V_data_V_1_payload_B;
reg    out_stream_V_data_V_1_sel_rd;
reg    out_stream_V_data_V_1_sel_wr;
wire    out_stream_V_data_V_1_sel;
wire    out_stream_V_data_V_1_load_A;
wire    out_stream_V_data_V_1_load_B;
reg   [1:0] out_stream_V_data_V_1_state;
wire    out_stream_V_data_V_1_state_cmp_full;
reg    out_stream_V_last_1_data_in;
reg    out_stream_V_last_1_data_out;
reg    out_stream_V_last_1_vld_in;
wire    out_stream_V_last_1_vld_out;
wire    out_stream_V_last_1_ack_in;
wire    out_stream_V_last_1_ack_out;
reg    out_stream_V_last_1_payload_A;
reg    out_stream_V_last_1_payload_B;
reg    out_stream_V_last_1_sel_rd;
reg    out_stream_V_last_1_sel_wr;
wire    out_stream_V_last_1_sel;
wire    out_stream_V_last_1_load_A;
wire    out_stream_V_last_1_load_B;
reg   [1:0] out_stream_V_last_1_state;
wire    out_stream_V_last_1_state_cmp_full;
reg    in_stream_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_272;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_242;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state9;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond1_reg_272_pp1_iter1_reg;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_242_pp0_iter1_reg;
reg   [31:0] i1_reg_80;
reg   [31:0] i_reg_91;
reg  signed [31:0] reg_102;
reg    ap_block_state1;
wire    ap_block_state13_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_state14_io;
wire    ap_block_state15_pp0_stage0_iter2;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
reg    ap_block_state21_io;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_state22_io;
reg    ap_block_pp1_stage0_11001;
reg  signed [31:0] reg_107;
wire   [0:0] tmp_s_fu_112_p2;
reg   [0:0] tmp_s_reg_187;
reg  signed [31:0] tmp_V_358_reg_191;
reg  signed [31:0] tmp_V_359_reg_198;
reg  signed [31:0] tmp_V_362_reg_204;
wire  signed [31:0] KER_size_0_fu_118_p2;
reg  signed [31:0] KER_size_0_reg_216;
wire  signed [31:0] OFM_size_0_fu_123_p2;
reg  signed [31:0] OFM_size_0_reg_221;
wire  signed [31:0] KER_size_1_fu_128_p2;
reg  signed [31:0] KER_size_1_reg_226;
wire    ap_CS_fsm_state10;
wire   [31:0] KER_bound_fu_132_p2;
reg   [31:0] KER_bound_reg_231;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_133_fu_136_p2;
reg   [31:0] tmp_133_reg_237;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_141_p2;
wire   [31:0] i_2_fu_146_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_1_fu_152_p2;
reg   [0:0] tmp_last_1_reg_251;
wire  signed [31:0] OFM_size_1_fu_157_p2;
reg  signed [31:0] OFM_size_1_reg_256;
wire    ap_CS_fsm_state17;
wire   [31:0] OFM_bound_fu_161_p2;
reg   [31:0] OFM_bound_reg_261;
wire    ap_CS_fsm_state18;
wire   [31:0] tmp_132_fu_166_p2;
reg   [31:0] tmp_132_reg_267;
wire    ap_CS_fsm_state19;
wire   [0:0] exitcond1_fu_171_p2;
wire   [31:0] i_18_fu_176_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_fu_182_p2;
reg   [0:0] tmp_last_reg_281;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_CS_fsm_state16;
reg    ap_block_state16;
reg   [17:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 out_stream_V_data_V_1_sel_rd = 1'b0;
#0 out_stream_V_data_V_1_sel_wr = 1'b0;
#0 out_stream_V_data_V_1_state = 2'd0;
#0 out_stream_V_last_1_sel_rd = 1'b0;
#0 out_stream_V_last_1_sel_wr = 1'b0;
#0 out_stream_V_last_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U213(
    .din0(reg_107),
    .din1(tmp_V_358_reg_191),
    .dout(KER_size_0_fu_118_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U214(
    .din0(tmp_V_362_reg_204),
    .din1(reg_107),
    .dout(OFM_size_0_fu_123_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U215(
    .din0(tmp_V_358_reg_191),
    .din1(KER_size_0_reg_216),
    .dout(KER_size_1_fu_128_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U216(
    .din0(tmp_V_359_reg_198),
    .din1(KER_size_1_reg_226),
    .dout(KER_bound_fu_132_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U217(
    .din0(tmp_V_362_reg_204),
    .din1(OFM_size_0_reg_221),
    .dout(OFM_size_1_fu_157_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U218(
    .din0(reg_102),
    .din1(OFM_size_1_reg_256),
    .dout(OFM_bound_fu_161_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_out == 1'b1) & (out_stream_V_data_V_1_vld_out == 1'b1))) begin
            out_stream_V_data_V_1_sel_rd <= ~out_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_in == 1'b1) & (out_stream_V_data_V_1_vld_in == 1'b1))) begin
            out_stream_V_data_V_1_sel_wr <= ~out_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd2;
        end else if ((((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)) & ~((out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)) & (out_stream_V_data_V_1_state == 2'd3)) | ((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b1)) | ((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd3;
        end else begin
            out_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_1_ack_out == 1'b1) & (out_stream_V_last_1_vld_out == 1'b1))) begin
            out_stream_V_last_1_sel_rd <= ~out_stream_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_1_ack_in == 1'b1) & (out_stream_V_last_1_vld_in == 1'b1))) begin
            out_stream_V_last_1_sel_wr <= ~out_stream_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_1_state == 2'd2) & (out_stream_V_last_1_vld_in == 1'b0)) | ((out_stream_V_last_1_state == 2'd3) & (out_stream_V_last_1_vld_in == 1'b0) & (out_stream_V_last_1_ack_out == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd2;
        end else if ((((out_stream_V_last_1_state == 2'd1) & (out_stream_V_last_1_ack_out == 1'b0)) | ((out_stream_V_last_1_state == 2'd3) & (out_stream_V_last_1_ack_out == 1'b0) & (out_stream_V_last_1_vld_in == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_1_vld_in == 1'b0) & (out_stream_V_last_1_ack_out == 1'b1)) & ~((out_stream_V_last_1_ack_out == 1'b0) & (out_stream_V_last_1_vld_in == 1'b1)) & (out_stream_V_last_1_state == 2'd3)) | ((out_stream_V_last_1_state == 2'd1) & (out_stream_V_last_1_ack_out == 1'b1)) | ((out_stream_V_last_1_state == 2'd2) & (out_stream_V_last_1_vld_in == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd3;
        end else begin
            out_stream_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_reg_80 <= i_2_fu_146_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_reg_80 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_91 <= i_18_fu_176_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_91 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        KER_bound_reg_231 <= KER_bound_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_187 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        KER_size_0_reg_216 <= KER_size_0_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        KER_size_1_reg_226 <= KER_size_1_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        OFM_bound_reg_261 <= OFM_bound_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_187 == 1'd1) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        OFM_size_0_reg_221 <= OFM_size_0_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        OFM_size_1_reg_256 <= OFM_size_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond1_reg_272 <= exitcond1_fu_171_p2;
        exitcond1_reg_272_pp1_iter1_reg <= exitcond1_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_242 <= exitcond_fu_141_p2;
        exitcond_reg_242_pp0_iter1_reg <= exitcond_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_A == 1'b1)) begin
        out_stream_V_data_V_1_payload_A <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_B == 1'b1)) begin
        out_stream_V_data_V_1_payload_B <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_1_load_A == 1'b1)) begin
        out_stream_V_last_1_payload_A <= out_stream_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_1_load_B == 1'b1)) begin
        out_stream_V_last_1_payload_B <= out_stream_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_102 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_107 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_132_reg_267 <= tmp_132_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_133_reg_237 <= tmp_133_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_358_reg_191 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_359_reg_198 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_362_reg_204 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_1_reg_251 <= tmp_last_1_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_last_reg_281 <= tmp_last_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_187 <= tmp_s_fu_112_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_141_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_171_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        in_stream_V_V_blk_n = in_stream_V_V_empty_n;
    end else begin
        in_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_stream_V_V_read = 1'b1;
    end else begin
        in_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_V_1_sel == 1'b1)) begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B;
    end else begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_stream_V_last_1_data_in = tmp_last_reg_281;
    end else if (((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_V_last_1_data_in = tmp_last_1_reg_251;
    end else if (((~((in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_last_1_data_in = 1'd0;
    end else begin
        out_stream_V_last_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_stream_V_last_1_sel == 1'b1)) begin
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_B;
    end else begin
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_242 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond1_reg_272 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_last_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_s_reg_187 == 1'd1) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((tmp_s_reg_187 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond1_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond1_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_242 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((exitcond_reg_242 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((exitcond_reg_242 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((exitcond1_reg_272 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((exitcond1_reg_272 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state21_io) | ((exitcond1_reg_272 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((exitcond_reg_242 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((exitcond_reg_242 == 1'd0) & (in_stream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state15_io = ((exitcond_reg_242_pp0_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16 = ((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0));
end

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((exitcond1_reg_272 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = ((exitcond1_reg_272 == 1'd0) & (in_stream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state22_io = ((exitcond1_reg_272_pp1_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond1_fu_171_p2 = ((i_reg_91 == OFM_bound_reg_261) ? 1'b1 : 1'b0);

assign exitcond_fu_141_p2 = ((i1_reg_80 == KER_bound_reg_231) ? 1'b1 : 1'b0);

assign i_18_fu_176_p2 = (i_reg_91 + 32'd1);

assign i_2_fu_146_p2 = (i1_reg_80 + 32'd1);

assign out_stream_TDATA = out_stream_V_data_V_1_data_out;

assign out_stream_TLAST = out_stream_V_last_1_data_out;

assign out_stream_TVALID = out_stream_V_last_1_state[1'd0];

assign out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state[1'd1];

assign out_stream_V_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full & ~out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_state_cmp_full & out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd;

assign out_stream_V_data_V_1_state_cmp_full = ((out_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state[1'd0];

assign out_stream_V_last_1_ack_in = out_stream_V_last_1_state[1'd1];

assign out_stream_V_last_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_1_load_A = (out_stream_V_last_1_state_cmp_full & ~out_stream_V_last_1_sel_wr);

assign out_stream_V_last_1_load_B = (out_stream_V_last_1_state_cmp_full & out_stream_V_last_1_sel_wr);

assign out_stream_V_last_1_sel = out_stream_V_last_1_sel_rd;

assign out_stream_V_last_1_state_cmp_full = ((out_stream_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_1_vld_out = out_stream_V_last_1_state[1'd0];

assign tmp_132_fu_166_p2 = ($signed(OFM_bound_reg_261) + $signed(32'd4294967295));

assign tmp_133_fu_136_p2 = ($signed(KER_bound_reg_231) + $signed(32'd4294967295));

assign tmp_last_1_fu_152_p2 = ((i1_reg_80 == tmp_133_reg_237) ? 1'b1 : 1'b0);

assign tmp_last_fu_182_p2 = ((i_reg_91 == tmp_132_reg_267) ? 1'b1 : 1'b0);

assign tmp_s_fu_112_p2 = ((in_stream_V_V_dout == 32'd0) ? 1'b1 : 1'b0);

endmodule //AXI_DMA_MASTER
