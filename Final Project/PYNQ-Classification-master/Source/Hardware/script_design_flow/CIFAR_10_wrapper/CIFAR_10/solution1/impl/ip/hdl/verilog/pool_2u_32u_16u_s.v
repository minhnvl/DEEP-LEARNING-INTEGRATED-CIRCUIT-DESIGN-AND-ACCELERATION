// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_2u_32u_16u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_pp0_stage0 = 60'd562949953421312;
parameter    ap_ST_fsm_state52 = 60'd1125899906842624;
parameter    ap_ST_fsm_state53 = 60'd2251799813685248;
parameter    ap_ST_fsm_state54 = 60'd4503599627370496;
parameter    ap_ST_fsm_state55 = 60'd9007199254740992;
parameter    ap_ST_fsm_state56 = 60'd18014398509481984;
parameter    ap_ST_fsm_state57 = 60'd36028797018963968;
parameter    ap_ST_fsm_pp2_stage0 = 60'd72057594037927936;
parameter    ap_ST_fsm_state60 = 60'd144115188075855872;
parameter    ap_ST_fsm_pp3_stage0 = 60'd288230376151711744;
parameter    ap_ST_fsm_state63 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg[31:0] out_V_V_din;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] IFMCH_curr_2;
reg   [31:0] IFMDim_curr_2;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_1265;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten6_reg_1352;
reg   [31:0] i3_reg_608;
reg   [5:0] ch2_reg_674;
reg   [62:0] indvar_flatten7_reg_685;
reg   [30:0] outpix_reg_696;
reg   [31:0] outch_reg_707;
reg   [31:0] tmp_V_reg_1165;
reg    ap_block_state1;
reg   [31:0] tmp_V_39_reg_1171;
reg    ap_block_state2;
reg  signed [31:0] tmp_V_41_reg_1176;
reg    ap_block_state3;
reg  signed [31:0] tmp_V_43_reg_1182;
reg    ap_block_state4;
reg  signed [31:0] tmp_V_47_reg_1187;
reg    ap_block_state6;
reg   [31:0] tmp_V_49_reg_1194;
reg    ap_block_state7;
wire   [5:0] j_3_fu_744_p2;
reg   [5:0] j_3_reg_1205;
wire    ap_CS_fsm_state9;
wire   [8:0] tmp_73_fu_750_p3;
reg   [8:0] tmp_73_reg_1210;
wire   [0:0] tmp_32_fu_738_p2;
wire   [0:0] tmp_33_fu_763_p2;
reg   [0:0] tmp_33_reg_1221;
wire  signed [31:0] KER_size_0_fu_866_p2;
reg  signed [31:0] KER_size_0_reg_1225;
wire    ap_CS_fsm_state47;
wire   [30:0] tmp_12_fu_874_p4;
reg   [30:0] tmp_12_reg_1230;
wire   [32:0] tmp_89_fu_884_p3;
reg   [32:0] tmp_89_reg_1235;
wire   [31:0] tmp_90_fu_892_p3;
reg   [31:0] tmp_90_reg_1240;
wire   [62:0] bound6_fu_908_p2;
reg   [62:0] bound6_reg_1245;
wire   [62:0] bound7_fu_917_p2;
reg   [62:0] bound7_reg_1250;
wire  signed [31:0] KER_size_1_fu_923_p2;
reg  signed [31:0] KER_size_1_reg_1255;
wire    ap_CS_fsm_state48;
wire   [31:0] KER_bound_fu_927_p2;
reg   [31:0] KER_bound_reg_1260;
wire    ap_CS_fsm_state49;
wire   [0:0] exitcond1_fu_931_p2;
wire    ap_block_state50_pp0_stage0_iter0;
reg    ap_block_state51_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_936_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [62:0] indvar_flatten_next5_fu_947_p2;
reg   [62:0] indvar_flatten_next5_reg_1277;
wire    ap_CS_fsm_state53;
wire   [0:0] exitcond_flatten8_fu_953_p2;
wire    ap_CS_fsm_state54;
wire   [31:0] indvar_flatten_next7_fu_958_p2;
reg   [31:0] indvar_flatten_next7_reg_1286;
wire   [30:0] xp_mid2_fu_969_p3;
reg   [30:0] xp_mid2_reg_1291;
wire   [32:0] indvar_flatten_next_fu_982_p2;
reg   [32:0] indvar_flatten_next_reg_1300;
wire    ap_CS_fsm_state55;
wire   [31:0] ch_mid2_fu_994_p3;
reg   [31:0] ch_mid2_reg_1305;
wire   [0:0] exitcond_flatten_fu_977_p2;
reg   [4:0] acc_addr_12_reg_1310;
wire   [31:0] ch_6_fu_1014_p2;
wire   [9:0] tmp_92_fu_1019_p1;
reg   [9:0] tmp_92_reg_1321;
wire    ap_CS_fsm_state57;
wire   [0:0] tmp_42_fu_1022_p2;
reg   [0:0] tmp_42_reg_1326;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state58_pp2_stage0_iter0;
wire    ap_block_state59_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [5:0] ch_5_fu_1028_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] buf_addr_9_reg_1335;
reg   [4:0] acc_addr_11_reg_1341;
wire   [30:0] xp_3_fu_1068_p2;
wire    ap_CS_fsm_state60;
wire   [0:0] exitcond_flatten6_fu_1073_p2;
wire    ap_block_state61_pp3_stage0_iter0;
reg    ap_block_state62_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [62:0] indvar_flatten_next6_fu_1078_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [30:0] tmp_38_mid2_v_fu_1104_p3;
reg   [30:0] tmp_38_mid2_v_reg_1361;
reg   [7:0] buf_addr_8_reg_1366;
wire   [31:0] outch_3_fu_1144_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state50;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state58;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state61;
reg   [7:0] buf_address0;
reg    buf_ce0;
wire   [31:0] buf_q0;
reg   [7:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [31:0] buf_d1;
reg   [4:0] acc_address0;
reg    acc_ce0;
wire   [31:0] acc_q0;
reg   [4:0] acc_address1;
reg    acc_ce1;
reg    acc_we1;
reg   [31:0] acc_d1;
reg   [31:0] IFMCH_curr_2_loc_reg_587;
reg    ap_block_state8;
wire   [0:0] tmp_s_fu_718_p2;
reg   [5:0] j_reg_597;
wire    ap_CS_fsm_state16;
reg   [62:0] indvar_flatten5_reg_619;
wire    ap_CS_fsm_state63;
reg   [31:0] indvar_flatten6_reg_630;
wire   [0:0] exitcond_flatten5_fu_942_p2;
reg   [30:0] xp_reg_641;
reg   [32:0] indvar_flatten_reg_652;
reg   [31:0] ch_reg_663;
reg   [30:0] ap_phi_mux_outpix_phi_fu_700_p4;
wire   [63:0] tmp_74_fu_758_p1;
wire   [63:0] tmp_76_fu_773_p3;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_78_fu_787_p3;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_80_fu_801_p3;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_82_fu_815_p3;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_84_fu_829_p3;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_86_fu_843_p3;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_88_fu_857_p3;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire   [63:0] tmp_39_fu_1002_p1;
wire   [63:0] tmp_100_cast_fu_1056_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] tmp_43_fu_1034_p1;
wire   [63:0] tmp_96_cast_fu_1139_p1;
wire   [63:0] tmp_36_fu_1116_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_V_2_fu_1160_p1;
reg    ap_block_pp3_stage0_01001;
wire   [31:0] tmp_44_fu_1061_p2;
wire   [31:0] tmp_40_fu_1007_p2;
wire   [8:0] tmp_75_fu_768_p2;
wire   [8:0] tmp_77_fu_782_p2;
wire   [8:0] tmp_79_fu_796_p2;
wire   [8:0] tmp_81_fu_810_p2;
wire   [8:0] tmp_83_fu_824_p2;
wire   [8:0] tmp_85_fu_838_p2;
wire   [8:0] tmp_87_fu_852_p2;
wire   [30:0] bound6_fu_908_p0;
wire   [62:0] cast9_fu_900_p1;
wire   [31:0] bound6_fu_908_p1;
wire   [31:0] bound7_fu_917_p0;
wire   [30:0] bound7_fu_917_p1;
wire   [0:0] exitcond_fu_964_p2;
wire   [0:0] exitcond6_fu_988_p2;
wire   [8:0] tmp_93_fu_1039_p3;
wire   [9:0] tmp_99_cast_fu_1047_p1;
wire   [9:0] tmp_94_fu_1051_p2;
wire   [0:0] exitcond5_fu_1090_p2;
wire   [30:0] outpix_3_fu_1084_p2;
wire   [31:0] outch_mid2_fu_1096_p3;
wire   [6:0] tmp_72_fu_1121_p1;
wire   [9:0] tmp_95_cast_fu_1125_p3;
wire   [9:0] tmp_71_fu_1112_p1;
wire   [9:0] tmp_91_fu_1133_p2;
wire   [29:0] tmp_V_s_fu_1150_p4;
wire    ap_CS_fsm_state52;
reg   [59:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [62:0] bound6_fu_908_p10;
wire   [62:0] bound7_fu_917_p00;
reg    ap_condition_460;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 60'd1;
#0 IFMCH_curr_2 = 32'd0;
#0 IFMDim_curr_2 = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

pool_2u_32u_16u_sbVr #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1)
);

pool_2u_32u_32u_s5jm #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .q0(acc_q0),
    .address1(acc_address1),
    .ce1(acc_ce1),
    .we1(acc_we1),
    .d1(acc_d1)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U103(
    .din0(tmp_V_47_reg_1187),
    .din1(tmp_V_41_reg_1176),
    .dout(KER_size_0_fu_866_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U104(
    .din0(tmp_V_41_reg_1176),
    .din1(KER_size_0_reg_1225),
    .dout(KER_size_1_fu_923_p2)
);

cifar_10_mul_32s_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cifar_10_mul_32s_bkb_U105(
    .din0(tmp_V_43_reg_1182),
    .din1(KER_size_1_reg_1255),
    .dout(KER_bound_fu_927_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state52)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state50))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state50);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state58))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state58);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state61) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state61))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state61);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_460)) begin
        if ((tmp_s_fu_718_p2 == 1'd0)) begin
            IFMCH_curr_2_loc_reg_587 <= IFMCH_curr_2;
        end else if ((tmp_s_fu_718_p2 == 1'd1)) begin
            IFMCH_curr_2_loc_reg_587 <= tmp_V_47_reg_1187;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        ch2_reg_674 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_42_fu_1022_p2 == 1'd0))) begin
        ch2_reg_674 <= ch_5_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        ch_reg_663 <= ch_6_fu_1014_p2;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond_flatten8_fu_953_p2 == 1'd0))) begin
        ch_reg_663 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_fu_931_p2 == 1'd0))) begin
        i3_reg_608 <= i_fu_936_p2;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        i3_reg_608 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        indvar_flatten5_reg_619 <= indvar_flatten_next5_reg_1277;
    end else if (((tmp_33_reg_1221 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        indvar_flatten5_reg_619 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (exitcond_flatten5_fu_942_p2 == 1'd0))) begin
        indvar_flatten6_reg_630 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        indvar_flatten6_reg_630 <= indvar_flatten_next7_reg_1286;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        indvar_flatten7_reg_685 <= 63'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_fu_1073_p2 == 1'd0))) begin
        indvar_flatten7_reg_685 <= indvar_flatten_next6_fu_1078_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
        indvar_flatten_reg_652 <= indvar_flatten_next_reg_1300;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond_flatten8_fu_953_p2 == 1'd0))) begin
        indvar_flatten_reg_652 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_reg_597 <= j_3_reg_1205;
    end else if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        j_reg_597 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        outch_reg_707 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_fu_1073_p2 == 1'd0))) begin
        outch_reg_707 <= outch_3_fu_1144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        outpix_reg_696 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0))) begin
        outpix_reg_696 <= tmp_38_mid2_v_reg_1361;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (exitcond_flatten5_fu_942_p2 == 1'd0))) begin
        xp_reg_641 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        xp_reg_641 <= xp_3_fu_1068_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (tmp_s_fu_718_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        IFMCH_curr_2 <= tmp_V_47_reg_1187;
        IFMDim_curr_2 <= tmp_V_49_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        KER_bound_reg_1260 <= KER_bound_fu_927_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (tmp_33_reg_1221 == 1'd0))) begin
        KER_size_0_reg_1225 <= KER_size_0_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        KER_size_1_reg_1255 <= KER_size_1_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_42_fu_1022_p2 == 1'd0))) begin
        acc_addr_11_reg_1341 <= tmp_43_fu_1034_p1;
        buf_addr_9_reg_1335 <= tmp_100_cast_fu_1056_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (exitcond_flatten_fu_977_p2 == 1'd0))) begin
        acc_addr_12_reg_1310 <= tmp_39_fu_1002_p1;
        ch_mid2_reg_1305 <= ch_mid2_fu_994_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_33_reg_1221 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        bound6_reg_1245 <= bound6_fu_908_p2;
        bound7_reg_1250 <= bound7_fu_917_p2;
        tmp_12_reg_1230 <= {{IFMDim_curr_2[31:1]}};
        tmp_89_reg_1235[32 : 1] <= tmp_89_fu_884_p3[32 : 1];
        tmp_90_reg_1240[31 : 1] <= tmp_90_fu_892_p3[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_fu_1073_p2 == 1'd0))) begin
        buf_addr_8_reg_1366 <= tmp_96_cast_fu_1139_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_1265 <= exitcond1_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_flatten6_reg_1352 <= exitcond_flatten6_fu_1073_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        indvar_flatten_next5_reg_1277 <= indvar_flatten_next5_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        indvar_flatten_next7_reg_1286 <= indvar_flatten_next7_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        indvar_flatten_next_reg_1300 <= indvar_flatten_next_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_3_reg_1205 <= j_3_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_fu_738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_33_reg_1221 <= tmp_33_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_fu_1073_p2 == 1'd0))) begin
        tmp_38_mid2_v_reg_1361 <= tmp_38_mid2_v_fu_1104_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_42_reg_1326 <= tmp_42_fu_1022_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_32_fu_738_p2 == 1'd0))) begin
        tmp_73_reg_1210[8 : 3] <= tmp_73_fu_750_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        tmp_92_reg_1321 <= tmp_92_fu_1019_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_39_reg_1171 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_41_reg_1176 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_43_reg_1182 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_47_reg_1187 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_49_reg_1194 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_1165 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (exitcond_flatten8_fu_953_p2 == 1'd0))) begin
        xp_mid2_reg_1291 <= xp_mid2_fu_969_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address0 = tmp_43_fu_1034_p1;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        acc_address0 = tmp_39_fu_1002_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        acc_address1 = tmp_36_fu_1116_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address1 = acc_addr_11_reg_1341;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        acc_address1 = acc_addr_12_reg_1310;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        acc_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        acc_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        acc_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        acc_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        acc_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        acc_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        acc_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        acc_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        acc_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        acc_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        acc_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        acc_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        acc_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        acc_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        acc_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        acc_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        acc_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        acc_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        acc_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        acc_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        acc_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        acc_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_address1 = 64'd0;
    end else begin
        acc_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56)))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        acc_d1 = tmp_40_fu_1007_p2;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        acc_d1 = 32'd0;
    end else begin
        acc_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state47) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_42_reg_1326 == 1'd0)) | ((tmp_32_fu_738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_fu_1073_p2 == 1'd0)) | ((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56)))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_931_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_42_fu_1022_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten6_fu_1073_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state61 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state61 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0))) begin
        ap_phi_mux_outpix_phi_fu_700_p4 = tmp_38_mid2_v_reg_1361;
    end else begin
        ap_phi_mux_outpix_phi_fu_700_p4 = outpix_reg_696;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address0 = tmp_96_cast_fu_1139_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address0 = tmp_100_cast_fu_1056_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address1 = buf_addr_8_reg_1366;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address1 = buf_addr_9_reg_1335;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_address1 = tmp_88_fu_857_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_address1 = tmp_86_fu_843_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_address1 = tmp_84_fu_829_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buf_address1 = tmp_82_fu_815_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_address1 = tmp_80_fu_801_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_address1 = tmp_78_fu_787_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address1 = tmp_76_fu_773_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_address1 = tmp_74_fu_758_p1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        buf_ce1 = 1'b1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_d1 = tmp_44_fu_1061_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        buf_d1 = 32'd0;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_42_reg_1326 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_32_fu_738_p2 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0)))) begin
        buf_we1 = 1'b1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1265 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1265 == 1'd0)) | ((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1265 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0))) begin
        out_V_V_din = tmp_V_2_fu_1160_p1;
    end else if (((~((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1265 == 1'd0)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_din = in_V_V_dout;
    end else begin
        out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten6_reg_1352 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1265 == 1'd0)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_32_fu_738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((tmp_33_reg_1221 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_931_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_931_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state53 : begin
            if (((exitcond_flatten5_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((exitcond_flatten8_fu_953_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (exitcond_flatten_fu_977_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((in_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_42_fu_1022_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_42_fu_1022_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten6_fu_1073_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten6_fu_1073_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1265 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1265 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1265 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1265 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1265 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1265 == 1'd0))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten6_reg_1352 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten6_reg_1352 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten6_reg_1352 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

assign ap_block_state50_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state51_pp0_stage0_iter1 = (((out_V_V_full_n == 1'b0) & (exitcond1_reg_1265 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond1_reg_1265 == 1'd0)));
end

assign ap_block_state58_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

assign ap_block_state61_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_pp3_stage0_iter1 = ((out_V_V_full_n == 1'b0) & (exitcond_flatten6_reg_1352 == 1'd0));
end

always @ (*) begin
    ap_block_state7 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_460 = (~((in_V_V_empty_n == 1'b0) | (out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound6_fu_908_p0 = cast9_fu_900_p1;

assign bound6_fu_908_p1 = bound6_fu_908_p10;

assign bound6_fu_908_p10 = IFMCH_curr_2_loc_reg_587;

assign bound6_fu_908_p2 = (bound6_fu_908_p0 * bound6_fu_908_p1);

assign bound7_fu_917_p0 = bound7_fu_917_p00;

assign bound7_fu_917_p00 = tmp_V_39_reg_1171;

assign bound7_fu_917_p1 = cast9_fu_900_p1;

assign bound7_fu_917_p2 = (bound7_fu_917_p0 * bound7_fu_917_p1);

assign cast9_fu_900_p1 = tmp_12_fu_874_p4;

assign ch_5_fu_1028_p2 = (ch2_reg_674 + 6'd1);

assign ch_6_fu_1014_p2 = (ch_mid2_reg_1305 + 32'd1);

assign ch_mid2_fu_994_p3 = ((exitcond6_fu_988_p2[0:0] === 1'b1) ? 32'd0 : ch_reg_663);

assign exitcond1_fu_931_p2 = ((i3_reg_608 == KER_bound_reg_1260) ? 1'b1 : 1'b0);

assign exitcond5_fu_1090_p2 = ((outch_reg_707 == IFMCH_curr_2_loc_reg_587) ? 1'b1 : 1'b0);

assign exitcond6_fu_988_p2 = ((ch_reg_663 == IFMCH_curr_2_loc_reg_587) ? 1'b1 : 1'b0);

assign exitcond_flatten5_fu_942_p2 = ((indvar_flatten5_reg_619 == bound7_reg_1250) ? 1'b1 : 1'b0);

assign exitcond_flatten6_fu_1073_p2 = ((indvar_flatten7_reg_685 == bound6_reg_1245) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_953_p2 = ((indvar_flatten6_reg_630 == tmp_90_reg_1240) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_977_p2 = ((indvar_flatten_reg_652 == tmp_89_reg_1235) ? 1'b1 : 1'b0);

assign exitcond_fu_964_p2 = ((xp_reg_641 == tmp_12_reg_1230) ? 1'b1 : 1'b0);

assign i_fu_936_p2 = (i3_reg_608 + 32'd1);

assign indvar_flatten_next5_fu_947_p2 = (indvar_flatten5_reg_619 + 63'd1);

assign indvar_flatten_next6_fu_1078_p2 = (indvar_flatten7_reg_685 + 63'd1);

assign indvar_flatten_next7_fu_958_p2 = (indvar_flatten6_reg_630 + 32'd1);

assign indvar_flatten_next_fu_982_p2 = (indvar_flatten_reg_652 + 33'd1);

assign j_3_fu_744_p2 = (j_reg_597 + 6'd1);

assign outch_3_fu_1144_p2 = (32'd1 + outch_mid2_fu_1096_p3);

assign outch_mid2_fu_1096_p3 = ((exitcond5_fu_1090_p2[0:0] === 1'b1) ? 32'd0 : outch_reg_707);

assign outpix_3_fu_1084_p2 = (31'd1 + ap_phi_mux_outpix_phi_fu_700_p4);

assign start_out = real_start;

assign tmp_100_cast_fu_1056_p1 = tmp_94_fu_1051_p2;

assign tmp_12_fu_874_p4 = {{IFMDim_curr_2[31:1]}};

assign tmp_32_fu_738_p2 = ((j_reg_597 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_33_fu_763_p2 = ((tmp_V_reg_1165 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_36_fu_1116_p1 = outch_mid2_fu_1096_p3;

assign tmp_38_mid2_v_fu_1104_p3 = ((exitcond5_fu_1090_p2[0:0] === 1'b1) ? outpix_3_fu_1084_p2 : ap_phi_mux_outpix_phi_fu_700_p4);

assign tmp_39_fu_1002_p1 = ch_mid2_fu_994_p3;

assign tmp_40_fu_1007_p2 = (acc_q0 + in_V_V_dout);

assign tmp_42_fu_1022_p2 = ((ch2_reg_674 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_43_fu_1034_p1 = ch2_reg_674;

assign tmp_44_fu_1061_p2 = (acc_q0 + buf_q0);

assign tmp_71_fu_1112_p1 = tmp_38_mid2_v_fu_1104_p3[9:0];

assign tmp_72_fu_1121_p1 = outch_mid2_fu_1096_p3[6:0];

assign tmp_73_fu_750_p3 = {{j_reg_597}, {3'd0}};

assign tmp_74_fu_758_p1 = tmp_73_fu_750_p3;

assign tmp_75_fu_768_p2 = (tmp_73_reg_1210 | 9'd1);

assign tmp_76_fu_773_p3 = {{55'd0}, {tmp_75_fu_768_p2}};

assign tmp_77_fu_782_p2 = (tmp_73_reg_1210 | 9'd2);

assign tmp_78_fu_787_p3 = {{55'd0}, {tmp_77_fu_782_p2}};

assign tmp_79_fu_796_p2 = (tmp_73_reg_1210 | 9'd3);

assign tmp_80_fu_801_p3 = {{55'd0}, {tmp_79_fu_796_p2}};

assign tmp_81_fu_810_p2 = (tmp_73_reg_1210 | 9'd4);

assign tmp_82_fu_815_p3 = {{55'd0}, {tmp_81_fu_810_p2}};

assign tmp_83_fu_824_p2 = (tmp_73_reg_1210 | 9'd5);

assign tmp_84_fu_829_p3 = {{55'd0}, {tmp_83_fu_824_p2}};

assign tmp_85_fu_838_p2 = (tmp_73_reg_1210 | 9'd6);

assign tmp_86_fu_843_p3 = {{55'd0}, {tmp_85_fu_838_p2}};

assign tmp_87_fu_852_p2 = (tmp_73_reg_1210 | 9'd7);

assign tmp_88_fu_857_p3 = {{55'd0}, {tmp_87_fu_852_p2}};

assign tmp_89_fu_884_p3 = {{IFMCH_curr_2_loc_reg_587}, {1'd0}};

assign tmp_90_fu_892_p3 = {{tmp_12_fu_874_p4}, {1'd0}};

assign tmp_91_fu_1133_p2 = (tmp_95_cast_fu_1125_p3 + tmp_71_fu_1112_p1);

assign tmp_92_fu_1019_p1 = xp_mid2_reg_1291[9:0];

assign tmp_93_fu_1039_p3 = {{ch2_reg_674}, {3'd0}};

assign tmp_94_fu_1051_p2 = (tmp_92_reg_1321 + tmp_99_cast_fu_1047_p1);

assign tmp_95_cast_fu_1125_p3 = {{tmp_72_fu_1121_p1}, {3'd0}};

assign tmp_96_cast_fu_1139_p1 = tmp_91_fu_1133_p2;

assign tmp_99_cast_fu_1047_p1 = tmp_93_fu_1039_p3;

assign tmp_V_2_fu_1160_p1 = tmp_V_s_fu_1150_p4;

assign tmp_V_s_fu_1150_p4 = {{buf_q0[31:2]}};

assign tmp_s_fu_718_p2 = ((tmp_V_reg_1165 == 32'd2) ? 1'b1 : 1'b0);

assign xp_3_fu_1068_p2 = (xp_mid2_reg_1291 + 31'd1);

assign xp_mid2_fu_969_p3 = ((exitcond_fu_964_p2[0:0] === 1'b1) ? 31'd0 : xp_reg_641);

always @ (posedge ap_clk) begin
    tmp_73_reg_1210[2:0] <= 3'b000;
    tmp_89_reg_1235[0] <= 1'b0;
    tmp_90_reg_1240[0] <= 1'b0;
end

endmodule //pool_2u_32u_16u_s
