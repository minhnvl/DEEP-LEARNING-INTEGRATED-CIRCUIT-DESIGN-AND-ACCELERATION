// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_DMA_MASTER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_DMA_MASTER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_DMA_MASTER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state1 = "1";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state2 = "10";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state3 = "100";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state4 = "1000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state5 = "10000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state6 = "100000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state12 = "100000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_pp0_stage0 = "1000000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state18 = "1000000000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_state19 = "10000000000000000";
const sc_lv<18> AXI_DMA_MASTER::ap_ST_fsm_pp1_stage0 = "100000000000000000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXI_DMA_MASTER::ap_const_boolean_1 = true;
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_0 = "0";
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_1 = "1";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_0 = "00";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_2 = "10";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_3 = "11";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_3 = "11";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_4 = "100";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_5 = "101";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_7 = "111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_11 = "10001";
const bool AXI_DMA_MASTER::ap_const_boolean_0 = false;
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_C = "1100";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_8 = "1000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_9 = "1001";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_A = "1010";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_B = "1011";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_E = "1110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_F = "1111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_10 = "10000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_D = "1101";

AXI_DMA_MASTER::AXI_DMA_MASTER(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cifar_10_mul_32s_bkb_U213 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U213");
    cifar_10_mul_32s_bkb_U213->din0(reg_107);
    cifar_10_mul_32s_bkb_U213->din1(tmp_V_358_reg_191);
    cifar_10_mul_32s_bkb_U213->dout(KER_size_0_fu_118_p2);
    cifar_10_mul_32s_bkb_U214 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U214");
    cifar_10_mul_32s_bkb_U214->din0(tmp_V_362_reg_204);
    cifar_10_mul_32s_bkb_U214->din1(reg_107);
    cifar_10_mul_32s_bkb_U214->dout(OFM_size_0_fu_123_p2);
    cifar_10_mul_32s_bkb_U215 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U215");
    cifar_10_mul_32s_bkb_U215->din0(tmp_V_358_reg_191);
    cifar_10_mul_32s_bkb_U215->din1(KER_size_0_reg_216);
    cifar_10_mul_32s_bkb_U215->dout(KER_size_1_fu_128_p2);
    cifar_10_mul_32s_bkb_U216 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U216");
    cifar_10_mul_32s_bkb_U216->din0(tmp_V_359_reg_198);
    cifar_10_mul_32s_bkb_U216->din1(KER_size_1_reg_226);
    cifar_10_mul_32s_bkb_U216->dout(KER_bound_fu_132_p2);
    cifar_10_mul_32s_bkb_U217 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U217");
    cifar_10_mul_32s_bkb_U217->din0(tmp_V_362_reg_204);
    cifar_10_mul_32s_bkb_U217->din1(OFM_size_0_reg_221);
    cifar_10_mul_32s_bkb_U217->dout(OFM_size_1_fu_157_p2);
    cifar_10_mul_32s_bkb_U218 = new cifar_10_mul_32s_bkb<1,1,32,32,32>("cifar_10_mul_32s_bkb_U218");
    cifar_10_mul_32s_bkb_U218->din0(reg_102);
    cifar_10_mul_32s_bkb_U218->din1(OFM_size_1_reg_256);
    cifar_10_mul_32s_bkb_U218->dout(OFM_bound_fu_161_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state21_io );
    sensitive << ( ap_block_state22_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state21_io );
    sensitive << ( ap_block_state22_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_stream_V_V_empty_n );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_242 );

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter1);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( exitcond_reg_242 );

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_242_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );

    SC_METHOD(thread_ap_block_state20_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state21_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond1_reg_272 );

    SC_METHOD(thread_ap_block_state21_pp1_stage0_iter1);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( exitcond1_reg_272 );

    SC_METHOD(thread_ap_block_state22_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond1_reg_272_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state22_pp1_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state13);
    sensitive << ( exitcond_fu_141_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state20);
    sensitive << ( exitcond1_fu_171_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_exitcond1_fu_171_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_reg_91 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( OFM_bound_reg_261 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond_fu_141_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_reg_80 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( KER_bound_reg_231 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_18_fu_176_p2);
    sensitive << ( i_reg_91 );

    SC_METHOD(thread_i_2_fu_146_p2);
    sensitive << ( i1_reg_80 );

    SC_METHOD(thread_in_stream_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_242 );

    SC_METHOD(thread_in_stream_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_V_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond1_reg_272_pp1_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_reg_242_pp0_iter1_reg );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_V_last_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_in);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_data_V_1_data_out);
    sensitive << ( out_stream_V_data_V_1_payload_A );
    sensitive << ( out_stream_V_data_V_1_payload_B );
    sensitive << ( out_stream_V_data_V_1_sel );

    SC_METHOD(thread_out_stream_V_data_V_1_load_A);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_load_B);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_sel);
    sensitive << ( out_stream_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_data_V_1_state_cmp_full);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_out);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_last_1_ack_in);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_last_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_last_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( tmp_last_1_reg_251 );
    sensitive << ( tmp_last_reg_281 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_out_stream_V_last_1_data_out);
    sensitive << ( out_stream_V_last_1_payload_A );
    sensitive << ( out_stream_V_last_1_payload_B );
    sensitive << ( out_stream_V_last_1_sel );

    SC_METHOD(thread_out_stream_V_last_1_load_A);
    sensitive << ( out_stream_V_last_1_sel_wr );
    sensitive << ( out_stream_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_1_load_B);
    sensitive << ( out_stream_V_last_1_sel_wr );
    sensitive << ( out_stream_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_1_sel);
    sensitive << ( out_stream_V_last_1_sel_rd );

    SC_METHOD(thread_out_stream_V_last_1_state_cmp_full);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_last_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_reg_272 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_242 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_last_1_vld_out);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_tmp_132_fu_166_p2);
    sensitive << ( OFM_bound_reg_261 );

    SC_METHOD(thread_tmp_133_fu_136_p2);
    sensitive << ( KER_bound_reg_231 );

    SC_METHOD(thread_tmp_last_1_fu_152_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_reg_80 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_133_reg_237 );
    sensitive << ( exitcond_fu_141_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_last_fu_182_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_reg_91 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( tmp_132_reg_267 );
    sensitive << ( exitcond1_fu_171_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_s_fu_112_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_dout );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_s_reg_187 );
    sensitive << ( exitcond_fu_141_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond1_fu_171_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_CS_fsm_state16 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000000000001";
    out_stream_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_data_V_1_state = "00";
    out_stream_V_last_1_sel_rd = SC_LOGIC_0;
    out_stream_V_last_1_sel_wr = SC_LOGIC_0;
    out_stream_V_last_1_state = "00";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_DMA_MASTER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_stream_V_V_dout, "(port)in_stream_V_V_dout");
    sc_trace(mVcdFile, in_stream_V_V_empty_n, "(port)in_stream_V_V_empty_n");
    sc_trace(mVcdFile, in_stream_V_V_read, "(port)in_stream_V_V_read");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_V_data_V_1_data_out, "out_stream_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_in, "out_stream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_out, "out_stream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_in, "out_stream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_out, "out_stream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_A, "out_stream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_B, "out_stream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_rd, "out_stream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_wr, "out_stream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel, "out_stream_V_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_A, "out_stream_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_B, "out_stream_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state, "out_stream_V_data_V_1_state");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state_cmp_full, "out_stream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_last_1_data_in, "out_stream_V_last_1_data_in");
    sc_trace(mVcdFile, out_stream_V_last_1_data_out, "out_stream_V_last_1_data_out");
    sc_trace(mVcdFile, out_stream_V_last_1_vld_in, "out_stream_V_last_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_last_1_vld_out, "out_stream_V_last_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_last_1_ack_in, "out_stream_V_last_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_last_1_ack_out, "out_stream_V_last_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_last_1_payload_A, "out_stream_V_last_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_last_1_payload_B, "out_stream_V_last_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_last_1_sel_rd, "out_stream_V_last_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_last_1_sel_wr, "out_stream_V_last_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_last_1_sel, "out_stream_V_last_1_sel");
    sc_trace(mVcdFile, out_stream_V_last_1_load_A, "out_stream_V_last_1_load_A");
    sc_trace(mVcdFile, out_stream_V_last_1_load_B, "out_stream_V_last_1_load_B");
    sc_trace(mVcdFile, out_stream_V_last_1_state, "out_stream_V_last_1_state");
    sc_trace(mVcdFile, out_stream_V_last_1_state_cmp_full, "out_stream_V_last_1_state_cmp_full");
    sc_trace(mVcdFile, in_stream_V_V_blk_n, "in_stream_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond1_reg_272, "exitcond1_reg_272");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_242, "exitcond_reg_242");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, exitcond1_reg_272_pp1_iter1_reg, "exitcond1_reg_272_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, exitcond_reg_242_pp0_iter1_reg, "exitcond_reg_242_pp0_iter1_reg");
    sc_trace(mVcdFile, i1_reg_80, "i1_reg_80");
    sc_trace(mVcdFile, i_reg_91, "i_reg_91");
    sc_trace(mVcdFile, reg_102, "reg_102");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter0, "ap_block_state13_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter1, "ap_block_state14_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter2, "ap_block_state15_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage0_iter0, "ap_block_state20_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage0_iter1, "ap_block_state21_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state21_io, "ap_block_state21_io");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage0_iter2, "ap_block_state22_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state22_io, "ap_block_state22_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, reg_107, "reg_107");
    sc_trace(mVcdFile, tmp_s_fu_112_p2, "tmp_s_fu_112_p2");
    sc_trace(mVcdFile, tmp_s_reg_187, "tmp_s_reg_187");
    sc_trace(mVcdFile, tmp_V_358_reg_191, "tmp_V_358_reg_191");
    sc_trace(mVcdFile, tmp_V_359_reg_198, "tmp_V_359_reg_198");
    sc_trace(mVcdFile, tmp_V_362_reg_204, "tmp_V_362_reg_204");
    sc_trace(mVcdFile, KER_size_0_fu_118_p2, "KER_size_0_fu_118_p2");
    sc_trace(mVcdFile, KER_size_0_reg_216, "KER_size_0_reg_216");
    sc_trace(mVcdFile, OFM_size_0_fu_123_p2, "OFM_size_0_fu_123_p2");
    sc_trace(mVcdFile, OFM_size_0_reg_221, "OFM_size_0_reg_221");
    sc_trace(mVcdFile, KER_size_1_fu_128_p2, "KER_size_1_fu_128_p2");
    sc_trace(mVcdFile, KER_size_1_reg_226, "KER_size_1_reg_226");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, KER_bound_fu_132_p2, "KER_bound_fu_132_p2");
    sc_trace(mVcdFile, KER_bound_reg_231, "KER_bound_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_133_fu_136_p2, "tmp_133_fu_136_p2");
    sc_trace(mVcdFile, tmp_133_reg_237, "tmp_133_reg_237");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, exitcond_fu_141_p2, "exitcond_fu_141_p2");
    sc_trace(mVcdFile, i_2_fu_146_p2, "i_2_fu_146_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_1_fu_152_p2, "tmp_last_1_fu_152_p2");
    sc_trace(mVcdFile, tmp_last_1_reg_251, "tmp_last_1_reg_251");
    sc_trace(mVcdFile, OFM_size_1_fu_157_p2, "OFM_size_1_fu_157_p2");
    sc_trace(mVcdFile, OFM_size_1_reg_256, "OFM_size_1_reg_256");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, OFM_bound_fu_161_p2, "OFM_bound_fu_161_p2");
    sc_trace(mVcdFile, OFM_bound_reg_261, "OFM_bound_reg_261");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_132_fu_166_p2, "tmp_132_fu_166_p2");
    sc_trace(mVcdFile, tmp_132_reg_267, "tmp_132_reg_267");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, exitcond1_fu_171_p2, "exitcond1_fu_171_p2");
    sc_trace(mVcdFile, i_18_fu_176_p2, "i_18_fu_176_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_last_fu_182_p2, "tmp_last_fu_182_p2");
    sc_trace(mVcdFile, tmp_last_reg_281, "tmp_last_reg_281");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state13, "ap_condition_pp0_exit_iter0_state13");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state20, "ap_condition_pp1_exit_iter0_state20");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

AXI_DMA_MASTER::~AXI_DMA_MASTER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cifar_10_mul_32s_bkb_U213;
    delete cifar_10_mul_32s_bkb_U214;
    delete cifar_10_mul_32s_bkb_U215;
    delete cifar_10_mul_32s_bkb_U216;
    delete cifar_10_mul_32s_bkb_U217;
    delete cifar_10_mul_32s_bkb_U218;
}

void AXI_DMA_MASTER::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state13.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state13.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state13.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state20.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state20.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state20.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_141_p2.read()))) {
        i1_reg_80 = i_2_fu_146_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i1_reg_80 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_171_p2.read()))) {
        i_reg_91 = i_18_fu_176_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_reg_91 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_out.read()))) {
            out_stream_V_data_V_1_sel_rd =  (sc_logic) (~out_stream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_in.read()))) {
            out_stream_V_data_V_1_sel_wr =  (sc_logic) (~out_stream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()))))) {
            out_stream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_out.read()))) {
            out_stream_V_last_1_sel_rd =  (sc_logic) (~out_stream_V_last_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_in.read()))) {
            out_stream_V_last_1_sel_wr =  (sc_logic) (~out_stream_V_last_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_1_state.read())))) {
            out_stream_V_last_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_1_state.read())))) {
            out_stream_V_last_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()))))) {
            out_stream_V_last_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_last_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        KER_bound_reg_231 = KER_bound_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_187.read()))) {
        KER_size_0_reg_216 = KER_size_0_fu_118_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        KER_size_1_reg_226 = KER_size_1_fu_128_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        OFM_bound_reg_261 = OFM_bound_fu_161_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_187.read()))) {
        OFM_size_0_reg_221 = OFM_size_0_fu_123_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        OFM_size_1_reg_256 = OFM_size_1_fu_157_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_272 = exitcond1_fu_171_p2.read();
        exitcond1_reg_272_pp1_iter1_reg = exitcond1_reg_272.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_242 = exitcond_fu_141_p2.read();
        exitcond_reg_242_pp0_iter1_reg = exitcond_reg_242.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_A.read())) {
        out_stream_V_data_V_1_payload_A = in_stream_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_B.read())) {
        out_stream_V_data_V_1_payload_B = in_stream_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_load_A.read())) {
        out_stream_V_last_1_payload_A = out_stream_V_last_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_load_B.read())) {
        out_stream_V_last_1_payload_B = out_stream_V_last_1_data_in.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_102 = in_stream_V_V_dout.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        reg_107 = in_stream_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tmp_132_reg_267 = tmp_132_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_133_reg_237 = tmp_133_fu_136_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_358_reg_191 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_359_reg_198 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_362_reg_204 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_141_p2.read()))) {
        tmp_last_1_reg_251 = tmp_last_1_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_171_p2.read()))) {
        tmp_last_reg_281 = tmp_last_fu_182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_s_reg_187 = tmp_s_fu_112_p2.read();
    }
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[12];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[17];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[13];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[14];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[15];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[16];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state22_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state22_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state13_pp0_stage0_iter0() {
    ap_block_state13_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state14_pp0_stage0_iter1() {
    ap_block_state14_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state15_pp0_stage0_iter2() {
    ap_block_state15_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state20_pp1_stage0_iter0() {
    ap_block_state20_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state21_io() {
    ap_block_state21_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state21_pp1_stage0_iter1() {
    ap_block_state21_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state22_io() {
    ap_block_state22_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state22_pp1_stage0_iter2() {
    ap_block_state22_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_condition_pp0_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_141_p2.read())) {
        ap_condition_pp0_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state13 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_condition_pp1_exit_iter0_state20() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_171_p2.read())) {
        ap_condition_pp1_exit_iter0_state20 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state20 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXI_DMA_MASTER::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_exitcond1_fu_171_p2() {
    exitcond1_fu_171_p2 = (!i_reg_91.read().is_01() || !OFM_bound_reg_261.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_91.read() == OFM_bound_reg_261.read());
}

void AXI_DMA_MASTER::thread_exitcond_fu_141_p2() {
    exitcond_fu_141_p2 = (!i1_reg_80.read().is_01() || !KER_bound_reg_231.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_80.read() == KER_bound_reg_231.read());
}

void AXI_DMA_MASTER::thread_i_18_fu_176_p2() {
    i_18_fu_176_p2 = (!i_reg_91.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_91.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_MASTER::thread_i_2_fu_146_p2() {
    i_2_fu_146_p2 = (!i1_reg_80.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i1_reg_80.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_MASTER::thread_in_stream_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read())))) {
        in_stream_V_V_blk_n = in_stream_V_V_empty_n.read();
    } else {
        in_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_in_stream_V_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        in_stream_V_V_read = ap_const_logic_1;
    } else {
        in_stream_V_V_read = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_V_data_V_1_data_out.read();
}

void AXI_DMA_MASTER::thread_out_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272_pp1_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242_pp0_iter1_reg.read())))) {
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_V_last_1_data_out.read();
}

void AXI_DMA_MASTER::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_ack_in() {
    out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_ack_out() {
    out_stream_V_data_V_1_ack_out = out_stream_TREADY.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_sel.read())) {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B.read();
    } else {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_load_A() {
    out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full.read() & ~out_stream_V_data_V_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_load_B() {
    out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_sel_wr.read() & out_stream_V_data_V_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_sel() {
    out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_state_cmp_full() {
    out_stream_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        out_stream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_vld_out() {
    out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_ack_in() {
    out_stream_V_last_1_ack_in = out_stream_V_last_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_ack_out() {
    out_stream_V_last_1_ack_out = out_stream_TREADY.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        out_stream_V_last_1_data_in =  (sc_logic) (tmp_last_reg_281.read()[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_stream_V_last_1_data_in =  (sc_logic) (tmp_last_1_reg_251.read()[0]);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)))) {
        out_stream_V_last_1_data_in =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        out_stream_V_last_1_data_in = sc_logic('X');
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_sel.read())) {
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_B.read();
    } else {
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_load_A() {
    out_stream_V_last_1_load_A = (out_stream_V_last_1_state_cmp_full.read() & ~out_stream_V_last_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_load_B() {
    out_stream_V_last_1_load_B = (out_stream_V_last_1_sel_wr.read() & out_stream_V_last_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_sel() {
    out_stream_V_last_1_sel = out_stream_V_last_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_state_cmp_full() {
    out_stream_V_last_1_state_cmp_full =  (sc_logic) ((!out_stream_V_last_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_last_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_242.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_272.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        out_stream_V_last_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_last_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_vld_out() {
    out_stream_V_last_1_vld_out = out_stream_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_tmp_132_fu_166_p2() {
    tmp_132_fu_166_p2 = (!OFM_bound_reg_261.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(OFM_bound_reg_261.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_133_fu_136_p2() {
    tmp_133_fu_136_p2 = (!KER_bound_reg_231.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(KER_bound_reg_231.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_last_1_fu_152_p2() {
    tmp_last_1_fu_152_p2 = (!i1_reg_80.read().is_01() || !tmp_133_reg_237.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_80.read() == tmp_133_reg_237.read());
}

void AXI_DMA_MASTER::thread_tmp_last_fu_182_p2() {
    tmp_last_fu_182_p2 = (!i_reg_91.read().is_01() || !tmp_132_reg_267.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_91.read() == tmp_132_reg_267.read());
}

void AXI_DMA_MASTER::thread_tmp_s_fu_112_p2() {
    tmp_s_fu_112_p2 = (!in_stream_V_V_dout.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_V_dout.read() == ap_const_lv32_0);
}

void AXI_DMA_MASTER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_187.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_187.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4096 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_141_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_141_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 131072 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_171_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_171_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

