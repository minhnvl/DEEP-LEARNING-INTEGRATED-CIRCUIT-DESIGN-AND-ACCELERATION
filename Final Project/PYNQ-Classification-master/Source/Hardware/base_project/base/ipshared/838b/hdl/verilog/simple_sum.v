// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simple_sum,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=68}" *)

module simple_sum (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_F = 4'b1111;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [3:0] in_data_TKEEP;
input  [3:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;

reg in_data_TREADY;
reg out_data_TVALID;

reg    ap_rst_n_inv;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_37;
reg    out_data_TDATA_blk_n;
wire   [0:0] in_data_last_V_tmp_fu_118_p1;
wire   [31:0] sum_1_fu_122_p2;
reg    ap_sig_ioackin_out_data_TREADY;
reg   [31:0] sum_reg_103;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_61;
reg    ap_reg_ioackin_out_data_TREADY;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 ap_reg_ioackin_out_data_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_data_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~((in_data_TVALID == 1'b0) | (~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~(in_data_TVALID == 1'b0) & (1'b1 == out_data_TREADY))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~((in_data_TVALID == 1'b0) | (~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        sum_reg_103 <= sum_1_fu_122_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        sum_reg_103 <= ap_const_lv32_0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_37) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_data_TREADY)) begin
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY;
    end else begin
        ap_sig_ioackin_out_data_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        in_data_TDATA_blk_n = in_data_TVALID;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~((in_data_TVALID == 1'b0) | (~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(in_data_last_V_tmp_fu_118_p1 == 1'b0))) begin
        out_data_TDATA_blk_n = out_data_TREADY;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~(in_data_TVALID == 1'b0) & (1'b0 == ap_reg_ioackin_out_data_TREADY))) begin
        out_data_TVALID = 1'b1;
    end else begin
        out_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : begin
            if ((~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~((in_data_TVALID == 1'b0) | (~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((in_data_last_V_tmp_fu_118_p1 == 1'b0) & ~((in_data_TVALID == 1'b0) | (~(in_data_last_V_tmp_fu_118_p1 == 1'b0) & (1'b0 == ap_sig_ioackin_out_data_TREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_37 = (ap_CS_fsm[ap_const_lv32_1] == 1'b1);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_0]);
end

assign in_data_last_V_tmp_fu_118_p1 = in_data_TLAST;

assign out_data_TDATA = (in_data_TDATA + sum_reg_103);

assign out_data_TDEST = 1'b0;

assign out_data_TID = 1'b0;

assign out_data_TKEEP = ap_const_lv4_F;

assign out_data_TLAST = 1'b1;

assign out_data_TSTRB = ap_const_lv4_F;

assign out_data_TUSER = 1'b0;

assign sum_1_fu_122_p2 = (in_data_TDATA + sum_reg_103);

endmodule //simple_sum
