// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream_mult,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=8,HLS_SYN_LUT=7}" *)

module stream_mult (
        ap_clk,
        ap_rst_n,
        in_a_TDATA,
        in_a_TVALID,
        in_a_TREADY,
        in_a_TKEEP,
        in_a_TSTRB,
        in_a_TUSER,
        in_a_TLAST,
        in_a_TID,
        in_a_TDEST,
        in_b_TDATA,
        in_b_TVALID,
        in_b_TREADY,
        in_b_TKEEP,
        in_b_TSTRB,
        in_b_TUSER,
        in_b_TLAST,
        in_b_TID,
        in_b_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv4_F = 4'b1111;

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_a_TDATA;
input   in_a_TVALID;
output   in_a_TREADY;
input  [3:0] in_a_TKEEP;
input  [3:0] in_a_TSTRB;
input  [0:0] in_a_TUSER;
input  [0:0] in_a_TLAST;
input  [0:0] in_a_TID;
input  [0:0] in_a_TDEST;
input  [31:0] in_b_TDATA;
input   in_b_TVALID;
output   in_b_TREADY;
input  [3:0] in_b_TKEEP;
input  [3:0] in_b_TSTRB;
input  [0:0] in_b_TUSER;
input  [0:0] in_b_TLAST;
input  [0:0] in_b_TID;
input  [0:0] in_b_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;

reg in_a_TREADY;
reg in_b_TREADY;
reg out_data_TVALID;

reg    ap_rst_n_inv;
reg    in_a_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_50;
reg    in_b_TDATA_blk_n;
reg    out_data_TDATA_blk_n;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_59;
reg    ap_sig_66;
wire   [0:0] r_V_fu_155_p2;
reg   [0:0] r_V_reg_171;
wire   [31:0] grp_fu_148_p2;
reg    ap_reg_ioackin_out_data_TREADY;
reg    ap_sig_ioackin_out_data_TREADY;
reg    grp_fu_148_ce;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 ap_reg_ioackin_out_data_TREADY = 1'b0;
end

stream_mult_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
stream_mult_mul_32s_32s_32_6_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_b_TDATA),
    .din1(in_a_TDATA),
    .ce(grp_fu_148_ce),
    .dout(grp_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_data_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == ap_sig_ioackin_out_data_TREADY))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b1 == out_data_TREADY))) begin
            ap_reg_ioackin_out_data_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_66)) begin
        r_V_reg_171 <= r_V_fu_155_p2;
    end
end

always @ (*) begin
    if (ap_sig_50) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_59) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_data_TREADY)) begin
        ap_sig_ioackin_out_data_TREADY = out_data_TREADY;
    end else begin
        ap_sig_ioackin_out_data_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ap_sig_66) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == ap_sig_ioackin_out_data_TREADY)))) begin
        grp_fu_148_ce = 1'b0;
    end else begin
        grp_fu_148_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        in_a_TDATA_blk_n = in_a_TVALID;
    end else begin
        in_a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_66)) begin
        in_a_TREADY = 1'b1;
    end else begin
        in_a_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        in_b_TDATA_blk_n = in_b_TVALID;
    end else begin
        in_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_66)) begin
        in_b_TREADY = 1'b1;
    end else begin
        in_b_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        out_data_TDATA_blk_n = out_data_TREADY;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == ap_reg_ioackin_out_data_TREADY))) begin
        out_data_TVALID = 1'b1;
    end else begin
        out_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_66) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == ap_sig_ioackin_out_data_TREADY)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_50 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_59 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_66 = ((in_a_TVALID == 1'b0) | (in_b_TVALID == 1'b0));
end

assign out_data_TDATA = grp_fu_148_p2;

assign out_data_TDEST = 1'b0;

assign out_data_TID = 1'b0;

assign out_data_TKEEP = ap_const_lv4_F;

assign out_data_TLAST = r_V_reg_171;

assign out_data_TSTRB = ap_const_lv4_F;

assign out_data_TUSER = 1'b0;

assign r_V_fu_155_p2 = (in_a_TLAST | in_b_TLAST);

endmodule //stream_mult
